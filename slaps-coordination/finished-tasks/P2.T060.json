{
  "task_id": "P2.T060",
  "created_at": "2025-09-14T19:41:47.143469Z",
  "task": {
    "id": "P2.T060",
    "feature_id": "F024",
    "title": "Design Storage Backends",
    "description": "Design task for Storage Backends",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f024-design.md",
          "docs/api/f024-openapi.yaml",
          "docs/schemas/f024-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Backend interface with Lists + Streams implementations.",
        "script": "test_p2.t060.sh"
      },
      {
        "type": "automated",
        "description": "Redis Cluster support for key tagging and safe ops.",
        "script": "test_p2.t060.sh"
      },
      {
        "type": "automated",
        "description": "Migration tool and documentation.",
        "script": "test_p2.t060.sh"
      },
      {
        "type": "manual",
        "description": "Define interface + capability flags",
        "script": null
      },
      {
        "type": "manual",
        "description": "Implement Streams backend",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/storage-backends.md",
        "excerpt": "Abstract storage to support multiple engines: Redis Lists (current), Redis Streams, and optionally KeyDB/Dragonfly and Redis Cluster. Provide a pluggable interface and a Kafka outbox bridge for intero",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Abstraction:",
        "Define `QueueBackend` interface: Enqueue, Dequeue, Ack/Nack, Peek, Length, Move (DLQ), Iter.",
        "Capability flags (atomic ack, consumer groups, idempotency support).",
        "Implementations:",
        "Lists (baseline): current Redis lists; keep as default.",
        "Streams: use XADD/XREADGROUP; maintain consumer group per worker pool; handle pending/claim.",
        "Redis Cluster: key tags to route queues to slots; avoid cross\u2011slot ops.",
        "KeyDB/Dragonfly: validate compatibility; perf tuning knobs.",
        "Outbox bridge:",
        "Optional: publish enqueue events to Kafka topics; reconcile on failures.",
        "Config + migration:",
        "Backend selection per queue; migration tools (drain + copy) with safety.",
        "Observability:",
        "Metrics per backend; warnings for unsupported features; tests for ordering/ack semantics."
      ],
      "user_stories": [
        "I can choose Streams for a specific queue to enable replay and consumer groups.",
        "I can migrate a queue from Lists to Streams with a guided tool."
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P2.T060.json",
    "on_failure": "Move this file to failed-tasks/P2.T060.json",
    "on_help_needed": "Move to help-me/P2.T060.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    }
  }
}