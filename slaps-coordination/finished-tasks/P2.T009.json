{
  "task_id": "P2.T009",
  "created_at": "2025-09-14T19:41:47.125815Z",
  "task": {
    "id": "P2.T009",
    "feature_id": "F003",
    "title": "Implement Visual Dag Builder",
    "description": "Implement task for Visual Dag Builder",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "DAG validation prevents cycles and missing deps.",
          "Runs persist state; survive restarts; resumable.",
          "Per-node retry/backoff and optional compensation supported."
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/visual-dag-builder/",
          "internal/visual-dag-builder/*_test.go",
          "docs/api/visual-dag-builder.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "DAG validation prevents cycles and missing deps.",
        "script": "test_p2.t009.sh"
      },
      {
        "type": "automated",
        "description": "Runs persist state; survive restarts; resumable.",
        "script": "test_p2.t009.sh"
      },
      {
        "type": "automated",
        "description": "Per-node retry/backoff and optional compensation supported.",
        "script": "test_p2.t009.sh"
      },
      {
        "type": "manual",
        "description": "TUI shows statuses: queued, running, success, failed, compensated.",
        "script": null
      },
      {
        "type": "manual",
        "description": "Define workflow spec (schema + examples)",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/visual-dag-builder.md",
        "excerpt": "Design and ship a terminal-native visual builder for multi-step workflows. Users assemble stages with dependencies, retries, and compensations, then submit the DAG as a reusable pipeline. This turns t",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Define workflow spec (schema + examples)",
        "Implement orchestrator (enqueue + state tracking)",
        "Admin API CRUD + run endpoints",
        "TUI canvas + inspector + palette",
        "Live status rendering + colors",
        "Docs + demos"
      ],
      "technical_approach": [
        "Model: introduce minimal workflow spec (YAML/JSON) with nodes, edges, retry/backoff, compensation, timeout, concurrency caps.",
        "Persistence: store workflow specs under Redis keys or a small metadata store; versioned with hashes.",
        "Execution: add a light orchestrator that enqueues per-node jobs and tracks completion via processing lists/heartbeats.",
        "TUI:",
        "Canvas: grid layout with keyboard navigation; node palette; inspector panel.",
        "Node types: task, decision (conditional), delay/timer, compensation.",
        "Validation: detect cycles, unreachable nodes, unsatisfied dependencies.",
        "Run: submit workflow + parameters; show live state (colors by status).",
        "API: endpoints to create/list/get/version workflows, start run, inspect run state.",
        "Observability: per-run trace ID; per-node timings; failure stats."
      ],
      "code_structure": {
        "main_package": "internal/visual-dag-builder",
        "files": [
          "visual-dag-builder.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      },
      "ui_components": [
        "DAG canvas with ASCII rendering",
        "Node palette (task, decision, parallel, loop, compensate)",
        "Properties inspector panel",
        "Keyboard navigation (hjkl movement)",
        "Zoom controls (50-200%)",
        "Live execution status overlay"
      ],
      "dag_operations": [
        "addNode(type, position)",
        "removeNode(nodeId)",
        "connectNodes(from, to, edgeType)",
        "validateDAG() - cycle detection",
        "topologicalSort()",
        "saveWorkflow(name, version)",
        "loadWorkflow(id)",
        "executeWorkflow(params)",
        "getExecutionStatus(runId)"
      ],
      "keyboard_shortcuts": {
        "h/j/k/l": "Navigate",
        "a": "Add node",
        "c": "Connect nodes",
        "d": "Delete",
        "u": "Undo",
        "r": "Redo"
      }
    }
  },
  "dependencies": [
    "P2.T008"
  ],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P2.T009.json",
    "on_failure": "Move this file to failed-tasks/P2.T009.json",
    "on_help_needed": "Move to help-me/P2.T009.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}