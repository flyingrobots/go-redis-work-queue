{
  "task_id": "P4.T015",
  "created_at": "2025-09-14T19:07:07.292935+00:00",
  "task": {
    "id": "P4.T015",
    "feature_id": "F005",
    "title": "Design Plugin Panel System",
    "description": "Design task for Plugin Panel System",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f005-design.md",
          "docs/api/f005-openapi.yaml",
          "docs/schemas/f005-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Host loads/isolates plugins with manifest validation and resource limits.",
        "script": "test_p4.t015.sh"
      },
      {
        "type": "automated",
        "description": "Capability prompts on first run; persisted decisions per plugin version.",
        "script": "test_p4.t015.sh"
      },
      {
        "type": "automated",
        "description": "Stable v1 API documented with examples in WASM and Lua/Starlark.",
        "script": "test_p4.t015.sh"
      },
      {
        "type": "manual",
        "description": "Two sample plugins shipped and tested.",
        "script": null
      },
      {
        "type": "manual",
        "description": "Define host API + capability model",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/plugin-panel-system.md",
        "excerpt": "A terminal\u2011native plugin framework that lets teams drop in custom panels for org\u2011specific metrics, transforms, and actions. Plugins render inside the TUI, receive typed events (stats, selection, timer",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Runtime: start with WASM (TinyGo) or Starlark/Lua for safety and portability; avoid Go `plugin` due to portability issues.",
        "API Surface (capability\u2011gated):",
        "Read\u2011only: subscribe to stats, keys, selection, timers.",
        "Actions: enqueue, peek, requeue, purge (require explicit user grant per plugin).",
        "UI: render text blocks with styles; receive keyboard/mouse events in plugin\u2019s zone.",
        "Packaging: plugin bundle = `manifest.yaml` (name, version, permissions, entry), bytecode/script, optional assets.",
        "Lifecycle: discover under `plugins/`, validate manifest + permissions, load sandbox, render panel region; hot\u2011reload on file change.",
        "Sandboxing: CPU/memory/time limits; deny filesystem/network by default; only brokered API calls allowed.",
        "Versioning: semantic version the host/plugin API; shims for minor changes; e2e contract tests.",
        "Samples: \u201cTenant SLA\u201d read\u2011only panel; \u201cBulk Requeue Helper\u201d action panel (cap\u2011gated)."
      ],
      "user_stories": [
        "I can enable a plugin and see its panel render without crashing the TUI.",
        "I can inspect requested permissions and approve/deny.",
        "I can build a plugin with typed events, test locally, and hot\u2011reload."
      ]
    }
  },
  "dependencies_completed": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P4.T015.json",
    "on_failure": "Move this file to failed-tasks/P4.T015.json with error details",
    "on_help_needed": "Move to help-me/P4.T015.json with 'help_request' field explaining the issue",
    "working_dir": "claude-XXX/P4.T015.json (where XXX is your worker ID)"
  }
}