{
  "task_id": "P1.T024",
  "created_at": "2025-09-14T19:41:47.129413Z",
  "task": {
    "id": "P1.T024",
    "feature_id": "F008",
    "title": "Implement Rbac And Tokens",
    "description": "Implement task for Rbac And Tokens",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "Auth middleware validates tokens with rotation and `kid`.",
          "Scope checks enforced for all Admin API endpoints.",
          "Audit entries recorded and retrievable with filters."
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/rbac-and-tokens/",
          "internal/rbac-and-tokens/*_test.go",
          "docs/api/rbac-and-tokens.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "high",
      "preemptible": false,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Auth middleware validates tokens with rotation and `kid`.",
        "script": "test_p1.t024.sh"
      },
      {
        "type": "automated",
        "description": "Scope checks enforced for all Admin API endpoints.",
        "script": "test_p1.t024.sh"
      },
      {
        "type": "automated",
        "description": "Audit entries recorded and retrievable with filters.",
        "script": "test_p1.t024.sh"
      },
      {
        "type": "manual",
        "description": "Define roles/scopes and resource patterns",
        "script": null
      },
      {
        "type": "manual",
        "description": "Implement token library + middleware",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/rbac-and-tokens.md",
        "excerpt": "Introduce role\u2011based access control and signed tokens over the Admin API. Scope access by action and resource, enforce deny\u2011by\u2011default, and maintain an auditable trail of destructive operations.\n\n> [!",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Define roles/scopes and resource patterns",
        "Implement token library + middleware",
        "Add audit log sink + API",
        "Update handlers to enforce scopes",
        "CLI issuance tool + docs"
      ],
      "technical_approach": [
        "Token format: PASETO (v2 local/public) or JWT with HMAC; include `sub`, `roles`, `scopes`, `exp`, `iat`.",
        "Roles and scopes:",
        "Roles: viewer, operator, maintainer, admin.",
        "Scopes map to endpoints/actions (e.g., `stats:read`, `enqueue:write`, `dlq:purge`).",
        "Resource constraints: per\u2011queue or prefix, per\u2011cluster.",
        "Middleware:",
        "Verify token signature; check expiry and NBF.",
        "Authorize by scopes/role; record decision with request hash.",
        "Correlate request ID for audit link.",
        "Key management:",
        "Support multiple keys (kid) with rotation.",
        "Offline issuance tool; short\u2011lived tokens; revocation list cache.",
        "Audit log:",
        "Append structured entries for destructive ops (who/what/why/result).",
        "Expose via Admin API with time range; redact sensitive values.",
        "TUI/CLI:",
        "Token info panel (who am I, roles, expiry); helpful errors for denied actions."
      ],
      "code_structure": {
        "main_package": "internal/rbac-and-tokens",
        "files": [
          "rbac-and-tokens.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      },
      "auth_model": {
        "roles": [
          "admin",
          "operator",
          "developer",
          "viewer"
        ],
        "permissions": [
          "queue:read",
          "queue:write",
          "queue:delete",
          "job:read",
          "job:write",
          "job:delete",
          "worker:read",
          "worker:manage",
          "admin:all"
        ],
        "token_types": [
          "bearer",
          "api_key",
          "session"
        ],
        "token_lifecycle": [
          "generate",
          "validate",
          "refresh",
          "revoke"
        ]
      },
      "token_lifecycle": [
        "Generate tokens with claims",
        "Validate token signatures",
        "Refresh expired tokens",
        "Revoke compromised tokens",
        "Track token usage"
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P1.T024.json",
    "on_failure": "Move this file to failed-tasks/P1.T024.json",
    "on_help_needed": "Move to help-me/P1.T024.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}