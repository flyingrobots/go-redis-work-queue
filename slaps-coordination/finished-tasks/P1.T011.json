{
  "task_id": "P1.T011",
  "created_at": "2025-09-14T19:07:07.292673+00:00",
  "task": {
    "id": "P1.T011",
    "feature_id": "F004",
    "title": "Design Distributed Tracing Integration",
    "description": "Design task for Distributed Tracing Integration",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f004-design.md",
          "docs/api/f004-openapi.yaml",
          "docs/schemas/f004-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "high",
      "preemptible": false,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Spans emitted for enqueue/dequeue/process with consistent attributes.",
        "script": "test_p1.t011.sh"
      },
      {
        "type": "automated",
        "description": "Context propagates via metadata; upstream trace linkage verified.",
        "script": "test_p1.t011.sh"
      },
      {
        "type": "automated",
        "description": "TUI shows trace IDs and open/copy actions.",
        "script": "test_p1.t011.sh"
      },
      {
        "type": "manual",
        "description": "Add otel setup in `internal/obs/tracing.go` with config",
        "script": null
      },
      {
        "type": "manual",
        "description": "Instrument producer/worker/admin critical paths",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/distributed-tracing-integration.md",
        "excerpt": "Make tracing first\u2011class with OpenTelemetry: automatically create spans for enqueue, dequeue, and job processing, propagate context through job payloads/metadata, and link to external tracing backends",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "SDK & instrumentation:",
        "Use `go.opentelemetry.io/otel` across producer, worker, and admin.",
        "Enqueue: start span `queue.enqueue` with attributes (queue, size, priority, tenant, idempotency_id).",
        "Dequeue: span `queue.dequeue` with wait time and queue depth at dequeue.",
        "Process: span `job.process` around user handler; record retries, outcome, error class.",
        "Link parent context if `traceparent`/`tracestate` present in payload metadata; otherwise start a new root and inject on enqueue.",
        "Propagation:",
        "Embed W3C trace headers in job metadata (not payload) to avoid accidental redaction.",
        "Ensure workers extract before processing and reinject on any outbound calls.",
        "Exporters & sampling:",
        "Default OTLP exporter to local Collector; config for endpoints/auth.",
        "Head sampling with per\u2011route/queue rates; tail sampling via Collector for high\u2011value spans (errors, long latency).",
        "Metrics + exemplars:",
        "Attach trace IDs to latency/error metrics as exemplars when sampled.",
        "TUI integration:",
        "Show trace ID in Peek/Info; provide an \u201cOpen Trace\u201d action and copyable link; enable quick filter by trace ID.",
        "Security & privacy:",
        "Redact sensitive attributes; configurable allowlist for span attributes.",
        "Disable/limit tracing in prod via config and sampling controls."
      ],
      "user_stories": [
        "I can open the trace for a failed job directly from the TUI.",
        "I can see queueing time vs processing time for a class of jobs."
      ]
    }
  },
  "dependencies_completed": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P1.T011.json",
    "on_failure": "Move this file to failed-tasks/P1.T011.json with error details",
    "on_help_needed": "Move to help-me/P1.T011.json with 'help_request' field explaining the issue",
    "working_dir": "claude-XXX/P1.T011.json (where XXX is your worker ID)"
  }
}