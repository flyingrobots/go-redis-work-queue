{
  "task_id": "P1.T002",
  "created_at": "2025-09-14T19:24:59.977024+00:00",
  "task": {
    "id": "P1.T002",
    "feature_id": "F001",
    "title": "Implement Admin Api",
    "description": "Implement task for Admin Api",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "Spec published (OpenAPI and/or proto) for Stats, StatsKeys, Peek, PurgeDLQ, PurgeAll, Bench.",
          "Auth with deny\u2011by\u2011default; tokens verified; audit log persisted for destructive calls.",
          "Rate limits and explicit confirmation flags for destructive actions."
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/admin-api/",
          "internal/admin-api/*_test.go",
          "docs/api/admin-api.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "high",
      "preemptible": false,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Spec published (OpenAPI and/or proto) for Stats, StatsKeys, Peek, PurgeDLQ, PurgeAll, Bench.",
        "script": "test_p1.t002.sh"
      },
      {
        "type": "automated",
        "description": "Auth with deny\u2011by\u2011default; tokens verified; audit log persisted for destructive calls.",
        "script": "test_p1.t002.sh"
      },
      {
        "type": "automated",
        "description": "Rate limits and explicit confirmation flags for destructive actions.",
        "script": "test_p1.t002.sh"
      },
      {
        "type": "manual",
        "description": "Versioned paths; compat notes; structured error schema.",
        "script": null
      },
      {
        "type": "manual",
        "description": "Handler unit tests and integration tests pass in CI.",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/admin-api.md",
        "excerpt": "Define a versioned, secure Admin API (HTTP/gRPC) that fronts existing admin functions, enabling TUI/web/automation with RBAC and observability.\n\n> [!note]- **\ud83d\udde3\ufe0f CLAUDE'S THOUGHTS \ud83d\udcad**\n> Smart foundatio",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Draft OpenAPI/proto; agree on schemas",
        "Auth middleware + config",
        "Implement Stats/StatsKeys",
        "Implement Peek",
        "Implement PurgeDLQ/PurgeAll with confirmations",
        "Implement Bench",
        "Add metrics + audit logs",
        "Write unit/integration tests",
        "Wire TUI Stats to API"
      ],
      "technical_approach": [
        "Choose transport: HTTP+JSON (OpenAPI) with optional gRPC; generate clients where useful.",
        "Implement middleware: auth (bearer), rate limiting, request logging, correlation IDs.",
        "Map handlers to `internal/admin` functions; add pagination/validation.",
        "Versioning: `/api/v1`; document compat policy; structured errors.",
        "Observability: metrics (per-endpoint latency/error), audit logs for destructive ops.",
        "Ship minimal clients for TUI/CLI; integration tests with ephemeral Redis."
      ],
      "code_structure": {
        "main_package": "internal/admin-api",
        "files": [
          "admin-api.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      },
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/stats",
          "handler": "GetStats",
          "description": "Return queue statistics (length, processing, DLQ counts)"
        },
        {
          "method": "GET",
          "path": "/api/v1/stats/keys",
          "handler": "GetStatsKeys",
          "description": "List all Redis keys used by queues"
        },
        {
          "method": "GET",
          "path": "/api/v1/queues/{queue}/peek",
          "handler": "PeekQueue",
          "description": "View jobs without removing them",
          "params": "count (optional)"
        },
        {
          "method": "DELETE",
          "path": "/api/v1/queues/{queue}/dlq",
          "handler": "PurgeDLQ",
          "description": "Clear dead letter queue with confirmation"
        },
        {
          "method": "DELETE",
          "path": "/api/v1/queues/all",
          "handler": "PurgeAll",
          "description": "Clear all queues with double confirmation"
        },
        {
          "method": "POST",
          "path": "/api/v1/bench",
          "handler": "RunBenchmark",
          "description": "Run performance benchmarks"
        }
      ],
      "middleware": [
        "Bearer token authentication (validate JWT)",
        "Rate limiting (100 req/min per token)",
        "Request logging with correlation IDs",
        "Audit logging for destructive operations",
        "CORS handler for browser clients",
        "Panic recovery middleware",
        "Timeout handler (30s default)"
      ],
      "auth_requirements": [
        "Bearer token validation",
        "JWT claims extraction",
        "Rate limiting per token",
        "Audit logging"
      ]
    }
  },
  "dependencies_completed": [
    "P1.T001"
  ],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P1.T002.json",
    "on_failure": "Move this file to failed-tasks/P1.T002.json",
    "on_help_needed": "Move to help-me/P1.T002.json",
    "note": "This is an IMPLEMENTATION task - write actual code!"
  }
}