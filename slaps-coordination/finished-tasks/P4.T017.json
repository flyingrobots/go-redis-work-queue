{
  "task_id": "P4.T017",
  "created_at": "2025-09-14T19:41:47.127892Z",
  "task": {
    "id": "P4.T017",
    "feature_id": "F006",
    "title": "Design Time Travel Debugger",
    "description": "Design task for Time Travel Debugger",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f006-design.md",
          "docs/api/f006-openapi.yaml",
          "docs/schemas/f006-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Complete execution history captured without >5% performance impact",
        "script": "test_p4.t017.sh"
      },
      {
        "type": "automated",
        "description": "Replay controls work smoothly in TUI with <100ms response time",
        "script": "test_p4.t017.sh"
      },
      {
        "type": "automated",
        "description": "Can export and share replay sessions",
        "script": "test_p4.t017.sh"
      },
      {
        "type": "manual",
        "description": "Historical data automatically pruned based on retention policy",
        "script": null
      },
      {
        "type": "manual",
        "description": "Design event schema and storage strategy",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/time-travel-debugger.md",
        "excerpt": "A revolutionary debugging tool that captures job execution history and allows developers to replay, step through, and analyze past job runs in the TUI. Navigate through time to see exact states, varia",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Event Capture:",
        "Record all state transitions with timestamps (enqueue, start, retry, complete, fail)",
        "Capture snapshots of payload, worker state, Redis state at key moments",
        "Use ring buffer with configurable retention (e.g., last 1000 jobs or 24 hours)",
        "Compress and store in Redis Streams or separate time-series store",
        "Replay Engine:",
        "Reconstruct exact execution timeline from events",
        "Support play/pause/step/rewind with variable speed",
        "Show state diffs between steps",
        "Highlight decision points (retry logic, routing, etc.)",
        "TUI Integration:",
        "Timeline scrubber with keyboard (h/l for back/forward, space to play/pause)",
        "Split view: current state vs. historical state",
        "Breadcrumb trail of execution path",
        "\"Jump to failure\" shortcuts",
        "Analysis Tools:",
        "Compare multiple job runs side-by-side",
        "Pattern detection across similar failures",
        "Export replay sessions for sharing/training",
        "Performance:",
        "Async event capture to avoid blocking job processing",
        "Sampling options for high-volume queues",
        "Automatic pruning of old events"
      ],
      "user_stories": [
        "I can replay a failed production job locally to understand what went wrong",
        "I can step through the exact sequence of events during an incident",
        "I can use historical replays for training and code reviews"
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P4.T017.json",
    "on_failure": "Move this file to failed-tasks/P4.T017.json",
    "on_help_needed": "Move to help-me/P4.T017.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    }
  }
}