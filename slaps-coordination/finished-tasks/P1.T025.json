{
  "task_id": "P1.T025",
  "created_at": "2025-09-14T19:41:47.129661Z",
  "task": {
    "id": "P1.T025",
    "feature_id": "F008",
    "title": "Test Rbac And Tokens",
    "description": "Test task for Rbac And Tokens",
    "boundaries": {
      "expected_complexity": {
        "value": "~600-800 LoC tests",
        "breakdown": "Unit (400), Integration (300), E2E (100)"
      },
      "definition_of_done": {
        "criteria": [
          "80% code coverage achieved",
          "All test scenarios passing",
          "Performance benchmarks validated",
          "Security tests passing",
          "No flaky tests",
          "Test documentation complete"
        ],
        "stop_when": "All tests green; do NOT refactor code"
      },
      "scope": {
        "includes": [
          "*_test.go files",
          "test/integration/",
          "test/e2e/",
          "test/fixtures/"
        ],
        "excludes": [
          "production code changes"
        ],
        "restrictions": "Tests must be deterministic and fast"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "unit",
          "at_percent": 40,
          "description": "Unit tests complete"
        },
        {
          "id": "integration",
          "at_percent": 70,
          "description": "Integration tests complete"
        },
        {
          "id": "e2e",
          "at_percent": 90,
          "description": "E2E tests complete"
        },
        {
          "id": "coverage",
          "at_percent": 100,
          "description": "Coverage targets met"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "testing",
        "golang",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "high",
      "preemptible": false,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 12
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 2
        },
        {
          "resource": "ci_runners",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Auth middleware validates tokens with rotation and `kid`.",
        "script": "test_p1.t025.sh"
      },
      {
        "type": "automated",
        "description": "Scope checks enforced for all Admin API endpoints.",
        "script": "test_p1.t025.sh"
      },
      {
        "type": "automated",
        "description": "Audit entries recorded and retrievable with filters.",
        "script": "test_p1.t025.sh"
      },
      {
        "type": "manual",
        "description": "Define roles/scopes and resource patterns",
        "script": null
      },
      {
        "type": "manual",
        "description": "Implement token library + middleware",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/rbac-and-tokens.md",
        "excerpt": "Introduce role\u2011based access control and signed tokens over the Admin API. Scope access by action and resource, enforce deny\u2011by\u2011default, and maintain an auditable trail of destructive operations.\n\n> [!",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "test_specification": {
      "test_categories": [
        {
          "type": "unit",
          "tests": [
            "Unit: scope matcher; token validation; time skew; revocation."
          ],
          "priority": "high"
        },
        {
          "type": "integration",
          "tests": [
            "Integration: end\u2011to\u2011end calls with different roles and resource filters."
          ],
          "priority": "high"
        },
        {
          "type": "security",
          "tests": [
            "Security: fuzz headers; attempt scope escalation; replay detection."
          ],
          "priority": "medium"
        }
      ],
      "coverage_requirements": {
        "unit": "80%",
        "integration": "70%",
        "e2e": "Critical paths only"
      },
      "test_data": [
        "Mock data generators",
        "Fixtures in test/fixtures/",
        "Dockerized dependencies"
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P1.T025.json",
    "on_failure": "Move this file to failed-tasks/P1.T025.json",
    "on_help_needed": "Move to help-me/P1.T025.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 2
        },
        {
          "resource": "ci_runners",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}