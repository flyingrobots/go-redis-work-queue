{
  "task_id": "P3.T078",
  "created_at": "2025-09-14T19:41:47.149070Z",
  "task": {
    "id": "P3.T078",
    "feature_id": "F032",
    "title": "Implement Advanced Rate Limiting",
    "description": "Implement task for Advanced Rate Limiting",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "Atomic token check/consume with Lua and proper TTLs.",
          "Priority weights influence throughput under contention.",
          "Admin API updates limits without restart; dry\u2011run previews impact."
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/advanced-rate-limiting/",
          "internal/advanced-rate-limiting/*_test.go",
          "docs/api/advanced-rate-limiting.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Atomic token check/consume with Lua and proper TTLs.",
        "script": "test_p3.t078.sh"
      },
      {
        "type": "automated",
        "description": "Priority weights influence throughput under contention.",
        "script": "test_p3.t078.sh"
      },
      {
        "type": "automated",
        "description": "Admin API updates limits without restart; dry\u2011run previews impact.",
        "script": "test_p3.t078.sh"
      },
      {
        "type": "manual",
        "description": "Lua script + Go wrapper",
        "script": null
      },
      {
        "type": "manual",
        "description": "Config + Admin API endpoints",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/advanced-rate-limiting.md",
        "excerpt": "Implement token\u2011bucket rate limiting with priority fairness and per\u2011tenant budgets. Support global and per\u2011queue/per\u2011tenant limits, dynamic tuning, and clear visibility into allowance and throttling.\n",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Lua script + Go wrapper",
        "Config + Admin API endpoints",
        "Producer hints + worker integration",
        "TUI widget + metrics",
        "Docs + examples"
      ],
      "technical_approach": [
        "Algorithms:",
        "Token bucket per key (`tenant:queue`) with refill rate and burst capacity.",
        "Priority fairness: weighted sharing between priorities (e.g., high=3, low=1) via separate buckets and proportional scheduling.",
        "Global cap: aggregate bucket above tenants to ensure cluster ceiling.",
        "Storage & atomicity:",
        "Redis Lua script to check/consume tokens atomically; returns `allow`, `wait_ms`, and remaining tokens.",
        "Keys: `rl:{scope}` with TTL; metadata hash for config.",
        "Configuration:",
        "Static config + Admin API to update rates and weights at runtime.",
        "Safe bounds and validation; dry\u2011run mode for tuning.",
        "Integration points:",
        "Producer side (enqueue): soft backpressure suggestions.",
        "Worker pull: throttle consumption when budget depleted.",
        "TUI: status widget showing budget/usage and recent throttles.",
        "Observability:",
        "Metrics: allowed/denied, wait times, bucket fill; per scope and aggregate.",
        "Debug endpoint to inspect current limits for a scope."
      ],
      "code_structure": {
        "main_package": "internal/advanced-rate-limiting",
        "files": [
          "advanced-rate-limiting.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      }
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P3.T078.json",
    "on_failure": "Move this file to failed-tasks/P3.T078.json",
    "on_help_needed": "Move to help-me/P3.T078.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}