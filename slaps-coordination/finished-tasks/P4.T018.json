{
  "task_id": "P4.T018",
  "created_at": "2025-09-14T19:41:47.128114Z",
  "task": {
    "id": "P4.T018",
    "feature_id": "F006",
    "title": "Implement Time Travel Debugger",
    "description": "Implement task for Time Travel Debugger",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "Complete execution history captured without >5% performance impact",
          "Replay controls work smoothly in TUI with <100ms response time",
          "Can export and share replay sessions"
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/time-travel-debugger/",
          "internal/time-travel-debugger/*_test.go",
          "docs/api/time-travel-debugger.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Complete execution history captured without >5% performance impact",
        "script": "test_p4.t018.sh"
      },
      {
        "type": "automated",
        "description": "Replay controls work smoothly in TUI with <100ms response time",
        "script": "test_p4.t018.sh"
      },
      {
        "type": "automated",
        "description": "Can export and share replay sessions",
        "script": "test_p4.t018.sh"
      },
      {
        "type": "manual",
        "description": "Historical data automatically pruned based on retention policy",
        "script": null
      },
      {
        "type": "manual",
        "description": "Design event schema and storage strategy",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/time-travel-debugger.md",
        "excerpt": "A revolutionary debugging tool that captures job execution history and allows developers to replay, step through, and analyze past job runs in the TUI. Navigate through time to see exact states, varia",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Design event schema and storage strategy",
        "Implement event capture middleware",
        "Build timeline reconstruction engine",
        "Create TUI replay interface",
        "Add comparison and analysis tools",
        "Performance optimization pass",
        "Documentation and examples"
      ],
      "technical_approach": [
        "Event Capture:",
        "Record all state transitions with timestamps (enqueue, start, retry, complete, fail)",
        "Capture snapshots of payload, worker state, Redis state at key moments",
        "Use ring buffer with configurable retention (e.g., last 1000 jobs or 24 hours)",
        "Compress and store in Redis Streams or separate time-series store",
        "Replay Engine:",
        "Reconstruct exact execution timeline from events",
        "Support play/pause/step/rewind with variable speed",
        "Show state diffs between steps",
        "Highlight decision points (retry logic, routing, etc.)",
        "TUI Integration:",
        "Timeline scrubber with keyboard (h/l for back/forward, space to play/pause)",
        "Split view: current state vs. historical state",
        "Breadcrumb trail of execution path",
        "\"Jump to failure\" shortcuts",
        "Analysis Tools:",
        "Compare multiple job runs side-by-side",
        "Pattern detection across similar failures",
        "Export replay sessions for sharing/training",
        "Performance:",
        "Async event capture to avoid blocking job processing",
        "Sampling options for high-volume queues",
        "Automatic pruning of old events"
      ],
      "code_structure": {
        "main_package": "internal/time-travel-debugger",
        "files": [
          "time-travel-debugger.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      }
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P4.T018.json",
    "on_failure": "Move this file to failed-tasks/P4.T018.json",
    "on_help_needed": "Move to help-me/P4.T018.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}