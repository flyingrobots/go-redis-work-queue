{
  "task_id": "P1.T023",
  "created_at": "2025-09-14T19:41:47.129191Z",
  "task": {
    "id": "P1.T023",
    "feature_id": "F008",
    "title": "Design Rbac And Tokens",
    "description": "Design task for Rbac And Tokens",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f008-design.md",
          "docs/api/f008-openapi.yaml",
          "docs/schemas/f008-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "high",
      "preemptible": false,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Auth middleware validates tokens with rotation and `kid`.",
        "script": "test_p1.t023.sh"
      },
      {
        "type": "automated",
        "description": "Scope checks enforced for all Admin API endpoints.",
        "script": "test_p1.t023.sh"
      },
      {
        "type": "automated",
        "description": "Audit entries recorded and retrievable with filters.",
        "script": "test_p1.t023.sh"
      },
      {
        "type": "manual",
        "description": "Define roles/scopes and resource patterns",
        "script": null
      },
      {
        "type": "manual",
        "description": "Implement token library + middleware",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/rbac-and-tokens.md",
        "excerpt": "Introduce role\u2011based access control and signed tokens over the Admin API. Scope access by action and resource, enforce deny\u2011by\u2011default, and maintain an auditable trail of destructive operations.\n\n> [!",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Token format: PASETO (v2 local/public) or JWT with HMAC; include `sub`, `roles`, `scopes`, `exp`, `iat`.",
        "Roles and scopes:",
        "Roles: viewer, operator, maintainer, admin.",
        "Scopes map to endpoints/actions (e.g., `stats:read`, `enqueue:write`, `dlq:purge`).",
        "Resource constraints: per\u2011queue or prefix, per\u2011cluster.",
        "Middleware:",
        "Verify token signature; check expiry and NBF.",
        "Authorize by scopes/role; record decision with request hash.",
        "Correlate request ID for audit link.",
        "Key management:",
        "Support multiple keys (kid) with rotation.",
        "Offline issuance tool; short\u2011lived tokens; revocation list cache.",
        "Audit log:",
        "Append structured entries for destructive ops (who/what/why/result).",
        "Expose via Admin API with time range; redact sensitive values.",
        "TUI/CLI:",
        "Token info panel (who am I, roles, expiry); helpful errors for denied actions."
      ],
      "user_stories": [
        "I can issue a token with `stats:read` and no destructive scopes.",
        "I can perform allowed actions and see denied ones fail clearly.",
        "I can list purge/requeue actions with actor and timestamp."
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P1.T023.json",
    "on_failure": "Move this file to failed-tasks/P1.T023.json",
    "on_help_needed": "Move to help-me/P1.T023.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    }
  }
}