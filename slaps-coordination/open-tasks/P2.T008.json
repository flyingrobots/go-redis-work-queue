{
  "task_id": "P2.T008",
  "created_at": "2025-09-14T19:41:47.125558Z",
  "task": {
    "id": "P2.T008",
    "feature_id": "F003",
    "title": "Design Visual Dag Builder",
    "description": "Design task for Visual Dag Builder",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f003-design.md",
          "docs/api/f003-openapi.yaml",
          "docs/schemas/f003-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "DAG validation prevents cycles and missing deps.",
        "script": "test_p2.t008.sh"
      },
      {
        "type": "automated",
        "description": "Runs persist state; survive restarts; resumable.",
        "script": "test_p2.t008.sh"
      },
      {
        "type": "automated",
        "description": "Per-node retry/backoff and optional compensation supported.",
        "script": "test_p2.t008.sh"
      },
      {
        "type": "manual",
        "description": "TUI shows statuses: queued, running, success, failed, compensated.",
        "script": null
      },
      {
        "type": "manual",
        "description": "Define workflow spec (schema + examples)",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/visual-dag-builder.md",
        "excerpt": "Design and ship a terminal-native visual builder for multi-step workflows. Users assemble stages with dependencies, retries, and compensations, then submit the DAG as a reusable pipeline. This turns t",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Model: introduce minimal workflow spec (YAML/JSON) with nodes, edges, retry/backoff, compensation, timeout, concurrency caps.",
        "Persistence: store workflow specs under Redis keys or a small metadata store; versioned with hashes.",
        "Execution: add a light orchestrator that enqueues per-node jobs and tracks completion via processing lists/heartbeats.",
        "TUI:",
        "Canvas: grid layout with keyboard navigation; node palette; inspector panel.",
        "Node types: task, decision (conditional), delay/timer, compensation.",
        "Validation: detect cycles, unreachable nodes, unsatisfied dependencies.",
        "Run: submit workflow + parameters; show live state (colors by status).",
        "API: endpoints to create/list/get/version workflows, start run, inspect run state.",
        "Observability: per-run trace ID; per-node timings; failure stats."
      ],
      "user_stories": [
        "I can draw a workflow, validate it, and save it with version notes.",
        "I can start a run with parameters and watch node states update in real time.",
        "I can inspect a failed run and see exactly which node failed and why."
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P2.T008.json",
    "on_failure": "Move this file to failed-tasks/P2.T008.json",
    "on_help_needed": "Move to help-me/P2.T008.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    }
  }
}