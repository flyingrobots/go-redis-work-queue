{
  "task_id": "P4.T034",
  "created_at": "2025-09-14T19:41:47.132299Z",
  "task": {
    "id": "P4.T034",
    "feature_id": "F012",
    "title": "Implement Kubernetes Operator",
    "description": "Implement task for Kubernetes Operator",
    "boundaries": {
      "expected_complexity": {
        "value": "~ LoC",
        "breakdown": "Core logic (60%), Tests (25%), Integration (15%)"
      },
      "definition_of_done": {
        "criteria": [
          "All functions implemented per specification",
          "Unit tests passing with 80% coverage",
          "Integration tests passing",
          "Code reviewed and approved",
          "Documentation updated",
          "No linting errors",
          "Performance benchmarks met",
          "CRDs with schemas and validation webhooks.",
          "Reconciler manages Deployments and scales by backlog/SLO.",
          "Rolling updates drain before restart."
        ],
        "stop_when": "Core functionality complete; do NOT add extra features"
      },
      "scope": {
        "includes": [
          "internal/kubernetes-operator/",
          "internal/kubernetes-operator/*_test.go",
          "docs/api/kubernetes-operator.md"
        ],
        "excludes": [
          "UI unless specified",
          "deployment configs"
        ],
        "restrictions": "Follow existing code patterns and style guide"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "setup",
          "at_percent": 10,
          "description": "Module structure created"
        },
        {
          "id": "core",
          "at_percent": 40,
          "description": "Core logic implemented"
        },
        {
          "id": "integration",
          "at_percent": 60,
          "description": "Integration complete"
        },
        {
          "id": "tests",
          "at_percent": 80,
          "description": "Tests passing"
        },
        {
          "id": "docs",
          "at_percent": 100,
          "description": "Documentation complete"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 1024,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 2048,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "golang",
        "backend",
        "redis"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 8,
      "mostLikely": 16,
      "pessimistic": 24
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "CRDs with schemas and validation webhooks.",
        "script": "test_p4.t034.sh"
      },
      {
        "type": "automated",
        "description": "Reconciler manages Deployments and scales by backlog/SLO.",
        "script": "test_p4.t034.sh"
      },
      {
        "type": "automated",
        "description": "Rolling updates drain before restart.",
        "script": "test_p4.t034.sh"
      },
      {
        "type": "manual",
        "description": "Define CRDs + validation webhooks",
        "script": null
      },
      {
        "type": "manual",
        "description": "Implement reconcilers (Queue, WorkerPool)",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/kubernetes-operator.md",
        "excerpt": "Ship a Kubernetes Operator with CRDs to declaratively manage queues and workers. Reconcile desired state (workers, rate limits, DLQ policies) from YAML, autoscale by backlog/SLA targets, and support s",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "implementation_checklist": [
        "Define CRDs + validation webhooks",
        "Implement reconcilers (Queue, WorkerPool)",
        "Autoscaling logic (backlog/SLO)",
        "Rolling update hooks (drain/ready)",
        "Examples + CI e2e"
      ],
      "technical_approach": [
        "CRDs:",
        "`Queue`: name, priorities, rate limits, DLQ config, retention.",
        "`WorkerPool`: image, version, env, resources, concurrency, max in\u2011flight, drain policy, min/max replicas.",
        "`Policy`: global knobs (circuit breaker thresholds, retry/backoff defaults).",
        "Reconciliation:",
        "Manage Deployments/StatefulSets for workers; inject config/secret mounts.",
        "Observe metrics (backlog length, p95 latency) and scale `WorkerPool` via HPA\u2011like logic.",
        "Orchestrate rolling updates with drain/ready hooks via Admin API.",
        "Safety & RBAC:",
        "Namespace\u2011scoped by default; cluster\u2011scoped optional.",
        "Webhooks: CRD validation (limits, reserved names), defaulting, and drift detection.",
        "Finalizers to drain on delete; prevent orphaned DLQs.",
        "Observability:",
        "Conditions per resource; events; Prometheus metrics (reconcile durations, errors).",
        "Tooling:",
        "Kustomize bases for common setups; examples repo."
      ],
      "code_structure": {
        "main_package": "internal/kubernetes-operator",
        "files": [
          "kubernetes-operator.go - Main implementation",
          "types.go - Data structures",
          "handlers.go - Request handlers",
          "errors.go - Custom errors",
          "config.go - Configuration"
        ]
      }
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P4.T034.json",
    "on_failure": "Move this file to failed-tasks/P4.T034.json",
    "on_help_needed": "Move to help-me/P4.T034.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [
        {
          "resource": "test_redis",
          "quantity": 1
        }
      ],
      "creates": [],
      "modifies": []
    }
  }
}