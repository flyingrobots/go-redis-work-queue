{
  "task_id": "P4.T027",
  "created_at": "2025-09-14T19:41:47.130058Z",
  "task": {
    "id": "P4.T027",
    "feature_id": "F009",
    "title": "Design Chaos Harness",
    "description": "Design task for Chaos Harness",
    "boundaries": {
      "expected_complexity": {
        "value": "1 design doc, ~800-1200 lines",
        "breakdown": "Architecture (400), API spec (300), Data model (200), Diagrams (300)"
      },
      "definition_of_done": {
        "criteria": [
          "Architecture documented with Mermaid diagrams",
          "API endpoints specified in OpenAPI 3.0 format",
          "Data models defined with JSON Schema",
          "Integration points identified and documented",
          "Security threat model completed",
          "Performance requirements specified",
          "Testing strategy defined"
        ],
        "stop_when": "Design approved by architect; do NOT start implementation"
      },
      "scope": {
        "includes": [
          "docs/design/f009-design.md",
          "docs/api/f009-openapi.yaml",
          "docs/schemas/f009-schema.json"
        ],
        "excludes": [
          "implementation code",
          "tests",
          "deployment configs"
        ],
        "restrictions": "Must follow company design template"
      }
    },
    "execution_guidance": {
      "logging": {
        "format": "JSON Lines (JSONL)",
        "required_fields": [
          "timestamp",
          "task_id",
          "step",
          "status",
          "message"
        ],
        "optional_fields": [
          "percent",
          "data",
          "checkpoint"
        ],
        "status_values": [
          "start",
          "progress",
          "done",
          "error",
          "checkpoint"
        ]
      },
      "checkpoints": [
        {
          "id": "cp1",
          "at_percent": 25,
          "description": "Architecture draft complete"
        },
        {
          "id": "cp2",
          "at_percent": 50,
          "description": "API specification complete"
        },
        {
          "id": "cp3",
          "at_percent": 75,
          "description": "Data models and diagrams complete"
        },
        {
          "id": "cp4",
          "at_percent": 100,
          "description": "Review and approval"
        }
      ],
      "monitoring": {
        "metrics_to_track": [],
        "alerts": []
      }
    },
    "resource_requirements": {
      "estimated": {
        "cpu_cores": 1,
        "memory_mb": 512,
        "disk_io_mbps": 10
      },
      "peak": {
        "cpu_cores": 2,
        "memory_mb": 1024,
        "disk_io_mbps": 50,
        "during": "compilation or testing"
      },
      "worker_capabilities_required": [
        "documentation",
        "architecture",
        "api_design"
      ]
    },
    "scheduling_hints": {
      "priority": "medium",
      "preemptible": true,
      "retry_on_failure": true,
      "max_retries": 3,
      "checkpoint_capable": true
    },
    "duration": {
      "optimistic": 4,
      "mostLikely": 8,
      "pessimistic": 16
    },
    "shared_resources": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    },
    "acceptance_checks": [
      {
        "type": "automated",
        "description": "Worker injectors controllable via Admin API with scopes/TTLs.",
        "script": "test_p4.t027.sh"
      },
      {
        "type": "automated",
        "description": "Scenario runner orchestrates injectors and records metrics.",
        "script": "test_p4.t027.sh"
      },
      {
        "type": "automated",
        "description": "TUI surfaces status and recovers settings.",
        "script": "test_p4.t027.sh"
      },
      {
        "type": "manual",
        "description": "Implement worker injectors + API",
        "script": null
      },
      {
        "type": "manual",
        "description": "Add Redis proxy hooks (optional)",
        "script": null
      }
    ],
    "evidence": [
      {
        "type": "plan",
        "source": "docs/ideas/chaos-harness.md",
        "excerpt": "Inject controlled failures (latency, drops, Redis failovers) to test resilience and visualize recovery in the TUI. Automate soak and chaos scenarios with guardrails.\n\n> [!note]- **\ud83d\udde3\ufe0f CLAUDE'S THOUGHTS",
        "confidence": 1.0,
        "rationale": "Primary feature specification"
      }
    ],
    "implementation_spec": {
      "design_sections": [
        "Executive Summary",
        "System Architecture",
        "API Specification",
        "Data Models",
        "Security Model",
        "Performance Requirements",
        "Testing Strategy",
        "Deployment Plan"
      ],
      "deliverables": [
        "Architecture document (Markdown + Mermaid)",
        "OpenAPI 3.0 specification",
        "JSON Schema definitions",
        "Security threat model",
        "Performance benchmarks"
      ],
      "technical_approach": [
        "Fault injectors:",
        "Worker: delays, random failures by rate, panic/restart, partial processing.",
        "Redis: optional proxy to inject latency/drops; simulate failover (sentinel/cluster).",
        "Admin API: toggles to enable injectors with TTLs and scopes.",
        "Scenario runner:",
        "Define scenarios (duration, patterns) and run/record outcomes.",
        "Integrate with Patterned Load Generator for mixed stress.",
        "TUI:",
        "Scenario picker; live status; recovery metrics (backlog drain time, error rate).",
        "Visual markers on charts during injections.",
        "Guardrails:",
        "\u201cChaos mode\u201d banner; require typed confirmation; lock out in prod by policy."
      ],
      "user_stories": [
        "I can run a 5\u2011minute latency+drop scenario in staging and see recovery time and DLQ impact."
      ]
    }
  },
  "dependencies": [],
  "instructions": {
    "on_complete": "Move this file to finished-tasks/P4.T027.json",
    "on_failure": "Move this file to failed-tasks/P4.T027.json",
    "on_help_needed": "Move to help-me/P4.T027.json",
    "note": "READ THE FULL TASK SPECIFICATION! All details are in the task field.",
    "resource_locks": {
      "exclusive_locks": [],
      "shared_limited": [],
      "creates": [],
      "modifies": []
    }
  }
}