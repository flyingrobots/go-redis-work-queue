{
  "id": "P1.T002",
  "feature_id": "F001",
  "title": "Implement Admin Api core logic",
  "description": "Build the core functionality for Admin Api",
  "boundaries": {
    "expected_complexity": {
      "value": "~800-1200 LoC",
      "breakdown": "Core logic (600 LoC), Utilities (200 LoC), Integration (200-400 LoC)"
    },
    "definition_of_done": {
      "criteria": [
        "Core functionality implemented",
        "Unit tests passing",
        "Integration with existing systems",
        "Error handling complete"
      ],
      "stop_when": "Core feature works; do NOT add UI or advanced features"
    },
    "scope": {
      "includes": [
        "internal/admin-api/"
      ],
      "excludes": [
        "UI components",
        "advanced features"
      ]
    },
    "execution_guidance": {
      "logging": "JSON Lines with progress updates every 10%",
      "checkpoints": [
        "setup - Create module structure and dependencies",
        "auth - Implement authentication middleware",
        "endpoints - Implement all API endpoints",
        "validation - Add input validation and error handling",
        "tests - Write unit tests for all functions",
        "metrics - Add observability and logging"
      ],
      "logging_examples": [
        "{\"timestamp\":\"2025-01-01T10:00:00Z\",\"task_id\":\"P1.T002\",\"step\":\"setup\",\"status\":\"start\",\"message\":\"Creating module structure\"}",
        "{\"timestamp\":\"2025-01-01T10:15:00Z\",\"task_id\":\"P1.T002\",\"step\":\"auth\",\"status\":\"progress\",\"percent\":25,\"message\":\"Bearer token middleware complete\"}",
        "{\"timestamp\":\"2025-01-01T10:30:00Z\",\"task_id\":\"P1.T002\",\"step\":\"endpoints\",\"status\":\"progress\",\"percent\":50,\"message\":\"Stats endpoint implemented\"}",
        "{\"timestamp\":\"2025-01-01T11:00:00Z\",\"task_id\":\"P1.T002\",\"step\":\"tests\",\"status\":\"done\",\"message\":\"All unit tests passing\",\"data\":{\"coverage\":\"82%\"}}"
      ]
    }
  },
  "shared_resources": {
    "exclusive": [
      "redis_schema"
    ],
    "shared_limited": [
      "test_redis"
    ],
    "creates": [
      "module:admin-api:v1"
    ],
    "modifies": []
  },
  "duration": {
    "optimistic": 8,
    "likely": 16,
    "pessimistic": 32
  },
  "reuses_existing": [
    "admin_system"
  ],
  "evidence": [
    {
      "type": "plan",
      "source": "docs/ideas/admin-api.md",
      "excerpt": "Feature specification for admin-api",
      "confidence": 1.0,
      "rationale": "Primary feature specification document"
    }
  ],
  "implementation_spec": {
    "implementation_checklist": [
      "Draft OpenAPI/proto; agree on schemas",
      "Auth middleware + config",
      "Implement Stats/StatsKeys",
      "Implement Peek",
      "Implement PurgeDLQ/PurgeAll with confirmations",
      "Implement Bench",
      "Add metrics + audit logs",
      "Write unit/integration tests",
      "Wire TUI Stats to API"
    ],
    "technical_requirements": [
      "Choose transport: HTTP+JSON (OpenAPI) with optional gRPC; generate clients where useful.",
      "Implement middleware: auth (bearer), rate limiting, request logging, correlation IDs.",
      "Map handlers to `internal/admin` functions; add pagination/validation.",
      "Versioning: `/api/v1`; document compat policy; structured errors.",
      "Observability: metrics (per-endpoint latency/error), audit logs for destructive ops.",
      "Ship minimal clients for TUI/CLI; integration tests with ephemeral Redis."
    ],
    "endpoints_to_implement": [
      "Stats, StatsKeys, Peek, Purge",
      "latency/error), audit logs for destructive ops.",
      "with auth tokens.",
      ", auth, rate limits, and versioning; CI green with tests; TUI switched to the API for at least one op (Stats).",
      ". Nothing revolutionary, but that's the point - this is table stakes for production job queues. The gRPC option puts you ahead of most Node.js competitors.",
      "- purge_endpoints",
      "---",
      "| Priority | Domain | Dependencies | Risks | LoC Estimate | Complexity | Effort | Impact |",
      "/Platform | `internal/admin`, auth middleware | Security hardening, destructive ops, compat drift | ~600\u20131000 (Go+spec) | Med\u2011High (per\u2011req O(1); Stats O(k)) | 8 (Fib) | High |",
      "(HTTP/gRPC) that fronts existing admin functions, enabling TUI/web/automation with RBAC and observability.",
      ") with optional gRPC; generate clients where useful.",
      "/v1`; document compat policy; structured errors.",
      "regardless of internal changes.",
      "and/or proto) for Stats, StatsKeys, Peek, PurgeDLQ, PurgeAll, Bench.",
      "for at least one op (Stats).",
      "/proto; agree on schemas",
      "```mermaid",
      "CLI -->|HTTP/gRPC| API",
      "API[(Admin API Service)] --> Admin[internal/admin]",
      "or BullMQ's REST endpoints. Nothing revolutionary, but that's the point - this is table stakes for production job queues. The gRPC option puts you ahead of most Node.js competitors.",
      "...)",
      ")",
      "dependencies:",
      "- grpc_api",
      "(Stats, Peek) to avoid overfetching.",
      ", allow remote control, and unlock future UI features while enforcing safety and auditability.",
      "Stats - Queue statistics and metrics",
      "StatsKeys - List all queue keys",
      "Peek - View jobs without removing",
      "PurgeDLQ - Clear dead letter queue",
      "PurgeAll - Clear all queues",
      "Bench - Run performance benchmarks"
    ],
    "integration_points": [
      "internal/admin - Existing admin functions",
      "internal/redis_client - Redis operations",
      "internal/obs - Metrics and monitoring"
    ],
    "specific_functions": [
      "Stats() - Return queue statistics (length, processing, DLQ counts)",
      "StatsKeys() - List all Redis keys used by queues",
      "Peek(queue, count) - View jobs without removing them",
      "PurgeDLQ(queue) - Clear dead letter queue with confirmation",
      "PurgeAll() - Clear all queues with double confirmation",
      "Bench(params) - Run performance benchmarks"
    ],
    "middleware_requirements": [
      "Bearer token authentication middleware",
      "Rate limiting middleware (100 req/min default)",
      "Request logging with correlation IDs",
      "Audit logging for destructive operations"
    ],
    "security_requirements": [
      "auth middleware | Security hardening, destructive ops, compat drift | ~600\u20131000 (Go+spec) | Med\u2011High (per\u2011req O(1); Stats O(k)) | 8 (Fib) | High |",
      "auth middleware + audit logging shows you're thinking about real production use",
      "auth tokens",
      "RBAC and observability",
      "auth (bearer), rate limiting, request logging, correlation IDs"
    ],
    "error_handling": "Structured error schema with error codes, rate limiting with 429 responses"
  },
  "acceptance_criteria": [
    "Spec published (OpenAPI and/or proto) for Stats, StatsKeys, Peek, PurgeDLQ, PurgeAll, Bench.",
    "Auth with deny\u2011by\u2011default; tokens verified; audit log persisted for destructive calls.",
    "Rate limits and explicit confirmation flags for destructive actions.",
    "Versioned paths; compat notes; structured error schema.",
    "Handler unit tests and integration tests pass in CI."
  ]
}