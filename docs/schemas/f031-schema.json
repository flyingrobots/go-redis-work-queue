{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://api.queue.example.com/schemas/policy-simulator/v1/schema.json",
  "title": "Policy Simulator Data Models",
  "description": "JSON Schema definitions for Policy Simulator API data structures",
  "type": "object",

  "$defs": {
    "SimulationRequest": {
      "type": "object",
      "title": "Simulation Request",
      "description": "Request to create a new policy simulation",
      "required": ["policies", "traffic_pattern", "duration"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Human-readable simulation name",
          "maxLength": 100,
          "examples": ["Black Friday load test", "Retry policy optimization"]
        },
        "policies": {
          "$ref": "#/$defs/PolicyConfiguration"
        },
        "traffic_pattern": {
          "$ref": "#/$defs/TrafficPattern"
        },
        "duration": {
          "type": "string",
          "description": "Simulation duration in ISO 8601 format",
          "pattern": "^P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$",
          "examples": ["PT2H30M", "P1DT12H", "PT45M"]
        },
        "confidence_level": {
          "type": "number",
          "description": "Confidence level for predictions",
          "minimum": 0.8,
          "maximum": 0.99,
          "default": 0.95,
          "examples": [0.95, 0.90, 0.99]
        },
        "model_type": {
          "type": "string",
          "description": "Queueing model to use for simulation",
          "enum": ["M/M/1", "M/M/c", "M/G/1", "auto"],
          "default": "auto"
        },
        "options": {
          "$ref": "#/$defs/SimulationOptions"
        }
      },
      "additionalProperties": false
    },

    "SimulationOptions": {
      "type": "object",
      "title": "Simulation Options",
      "description": "Additional configuration options for simulation",
      "properties": {
        "max_events": {
          "type": "integer",
          "description": "Maximum number of events to simulate",
          "minimum": 1000,
          "maximum": 10000000,
          "default": 1000000
        },
        "time_step": {
          "type": "string",
          "description": "Simulation time step granularity",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT1S",
          "examples": ["PT1S", "PT0.1S", "PT5S"]
        },
        "warm_up_period": {
          "type": "string",
          "description": "Warm-up period to exclude from results",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT5M"
        },
        "seed": {
          "type": "integer",
          "description": "Random seed for reproducible simulations",
          "minimum": 0,
          "maximum": 2147483647
        },
        "parallel_runs": {
          "type": "integer",
          "description": "Number of parallel simulation runs for statistical accuracy",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "additionalProperties": false
    },

    "PolicyConfiguration": {
      "type": "object",
      "title": "Policy Configuration",
      "description": "Complete policy configuration for queue management",
      "properties": {
        "retry_policy": {
          "$ref": "#/$defs/RetryPolicy"
        },
        "rate_limit": {
          "$ref": "#/$defs/RateLimit"
        },
        "concurrency": {
          "$ref": "#/$defs/ConcurrencyPolicy"
        },
        "backoff": {
          "$ref": "#/$defs/BackoffPolicy"
        },
        "timeout": {
          "$ref": "#/$defs/TimeoutPolicy"
        },
        "circuit_breaker": {
          "$ref": "#/$defs/CircuitBreakerPolicy"
        },
        "dead_letter_queue": {
          "$ref": "#/$defs/DeadLetterQueuePolicy"
        },
        "priority": {
          "$ref": "#/$defs/PriorityPolicy"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last modification",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "description": "Policy configuration version number",
          "minimum": 1,
          "readOnly": true
        }
      },
      "additionalProperties": false
    },

    "RetryPolicy": {
      "type": "object",
      "title": "Retry Policy",
      "description": "Configuration for job retry behavior",
      "required": ["max_attempts"],
      "properties": {
        "max_attempts": {
          "type": "integer",
          "description": "Maximum number of retry attempts",
          "minimum": 1,
          "maximum": 10,
          "examples": [3, 5, 1]
        },
        "initial_delay": {
          "type": "string",
          "description": "Initial delay before first retry (ISO 8601 duration)",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT0.1S",
          "examples": ["PT0.1S", "PT1S", "PT5S"]
        },
        "max_delay": {
          "type": "string",
          "description": "Maximum delay between retries",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S",
          "examples": ["PT30S", "PT1M", "PT5M"]
        },
        "multiplier": {
          "type": "number",
          "description": "Exponential backoff multiplier",
          "minimum": 1.0,
          "maximum": 10.0,
          "default": 2.0,
          "examples": [1.5, 2.0, 3.0]
        },
        "jitter": {
          "type": "number",
          "description": "Jitter factor to randomize delays",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.1,
          "examples": [0.0, 0.1, 0.25]
        },
        "retry_codes": {
          "type": "array",
          "description": "HTTP status codes that trigger retries",
          "items": {
            "type": "integer",
            "minimum": 400,
            "maximum": 599
          },
          "uniqueItems": true,
          "default": [500, 502, 503, 504],
          "examples": [[500, 502, 503, 504], [500, 503], [429, 500, 502, 503, 504]]
        },
        "retry_conditions": {
          "type": "array",
          "description": "Additional conditions that trigger retries",
          "items": {
            "type": "string",
            "enum": ["timeout", "connection_error", "dns_error", "ssl_error"]
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },

    "RateLimit": {
      "type": "object",
      "title": "Rate Limit Policy",
      "description": "Configuration for request rate limiting",
      "required": ["requests_per_second"],
      "properties": {
        "requests_per_second": {
          "type": "number",
          "description": "Maximum requests per second",
          "minimum": 0.1,
          "maximum": 100000,
          "examples": [10, 100, 1000]
        },
        "burst_capacity": {
          "type": "integer",
          "description": "Maximum burst capacity above base rate",
          "minimum": 1,
          "examples": [10, 200, 1000]
        },
        "algorithm": {
          "type": "string",
          "description": "Rate limiting algorithm",
          "enum": ["token_bucket", "sliding_window", "fixed_window"],
          "default": "token_bucket"
        },
        "enforcement": {
          "type": "string",
          "description": "How strictly to enforce rate limits",
          "enum": ["strict", "advisory"],
          "default": "strict"
        },
        "overflow_action": {
          "type": "string",
          "description": "Action to take when rate limit is exceeded",
          "enum": ["reject", "queue", "throttle"],
          "default": "queue"
        },
        "scope": {
          "type": "string",
          "description": "Scope of rate limiting",
          "enum": ["global", "per_worker", "per_queue", "per_user"],
          "default": "global"
        },
        "window_size": {
          "type": "string",
          "description": "Time window for sliding/fixed window algorithms",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT1M"
        }
      },
      "additionalProperties": false
    },

    "ConcurrencyPolicy": {
      "type": "object",
      "title": "Concurrency Policy",
      "description": "Configuration for worker concurrency and scaling",
      "required": ["max_workers"],
      "properties": {
        "max_workers": {
          "type": "integer",
          "description": "Maximum number of concurrent workers",
          "minimum": 1,
          "maximum": 1000,
          "examples": [5, 10, 50]
        },
        "min_workers": {
          "type": "integer",
          "description": "Minimum number of workers to maintain",
          "minimum": 0,
          "default": 1
        },
        "scaling_policy": {
          "type": "string",
          "description": "Worker scaling strategy",
          "enum": ["manual", "adaptive", "predictive", "scheduled"],
          "default": "manual"
        },
        "scale_up_threshold": {
          "type": "number",
          "description": "Utilization threshold for scaling up (0.0-1.0)",
          "minimum": 0.1,
          "maximum": 1.0,
          "default": 0.8,
          "examples": [0.7, 0.8, 0.9]
        },
        "scale_down_threshold": {
          "type": "number",
          "description": "Utilization threshold for scaling down (0.0-1.0)",
          "minimum": 0.1,
          "maximum": 1.0,
          "default": 0.3,
          "examples": [0.2, 0.3, 0.5]
        },
        "scale_cooldown": {
          "type": "string",
          "description": "Cooldown period between scaling operations",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT1M",
          "examples": ["PT30S", "PT1M", "PT5M"]
        },
        "scale_factor": {
          "type": "number",
          "description": "Factor by which to scale workers",
          "minimum": 1.1,
          "maximum": 10.0,
          "default": 2.0
        },
        "queue_length_threshold": {
          "type": "integer",
          "description": "Queue length that triggers scaling",
          "minimum": 1,
          "default": 100
        }
      },
      "additionalProperties": false
    },

    "BackoffPolicy": {
      "type": "object",
      "title": "Backoff Policy",
      "description": "Configuration for backoff strategies",
      "required": ["strategy"],
      "properties": {
        "strategy": {
          "type": "string",
          "description": "Backoff calculation strategy",
          "enum": ["exponential", "linear", "constant", "fibonacci", "polynomial"]
        },
        "base_delay": {
          "type": "string",
          "description": "Base delay for backoff calculation",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT1S"
        },
        "max_delay": {
          "type": "string",
          "description": "Maximum backoff delay",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT5M"
        },
        "multiplier": {
          "type": "number",
          "description": "Multiplier for exponential/polynomial backoff",
          "minimum": 1.0,
          "maximum": 10.0,
          "default": 2.0
        },
        "exponent": {
          "type": "number",
          "description": "Exponent for polynomial backoff",
          "minimum": 1.0,
          "maximum": 5.0,
          "default": 2.0
        },
        "jitter_type": {
          "type": "string",
          "description": "Type of jitter to apply",
          "enum": ["none", "uniform", "gaussian", "exponential"],
          "default": "uniform"
        },
        "jitter_factor": {
          "type": "number",
          "description": "Jitter intensity factor",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.1
        }
      },
      "additionalProperties": false
    },

    "TimeoutPolicy": {
      "type": "object",
      "title": "Timeout Policy",
      "description": "Configuration for various timeout settings",
      "properties": {
        "connection_timeout": {
          "type": "string",
          "description": "Connection establishment timeout",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT10S"
        },
        "request_timeout": {
          "type": "string",
          "description": "Individual request timeout",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S"
        },
        "idle_timeout": {
          "type": "string",
          "description": "Connection idle timeout",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT5M"
        },
        "total_timeout": {
          "type": "string",
          "description": "Total operation timeout including retries",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT10M"
        },
        "grace_period": {
          "type": "string",
          "description": "Grace period before force termination",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S"
        }
      },
      "additionalProperties": false
    },

    "CircuitBreakerPolicy": {
      "type": "object",
      "title": "Circuit Breaker Policy",
      "description": "Configuration for circuit breaker pattern",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether circuit breaker is enabled",
          "default": false
        },
        "failure_threshold": {
          "type": "integer",
          "description": "Number of failures before opening circuit",
          "minimum": 1,
          "maximum": 100,
          "default": 5
        },
        "failure_rate_threshold": {
          "type": "number",
          "description": "Failure rate threshold (0.0-1.0)",
          "minimum": 0.01,
          "maximum": 1.0,
          "default": 0.5
        },
        "success_threshold": {
          "type": "integer",
          "description": "Number of successes before closing circuit",
          "minimum": 1,
          "maximum": 100,
          "default": 3
        },
        "timeout": {
          "type": "string",
          "description": "Time to wait before attempting to close circuit",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT1M"
        },
        "half_open_max_calls": {
          "type": "integer",
          "description": "Maximum calls allowed in half-open state",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        },
        "sliding_window_size": {
          "type": "integer",
          "description": "Size of sliding window for failure rate calculation",
          "minimum": 10,
          "maximum": 1000,
          "default": 100
        }
      },
      "additionalProperties": false
    },

    "DeadLetterQueuePolicy": {
      "type": "object",
      "title": "Dead Letter Queue Policy",
      "description": "Configuration for dead letter queue handling",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether DLQ is enabled",
          "default": true
        },
        "max_retry_attempts": {
          "type": "integer",
          "description": "Maximum retry attempts before sending to DLQ",
          "minimum": 0,
          "maximum": 100,
          "default": 3
        },
        "retention_period": {
          "type": "string",
          "description": "How long to retain jobs in DLQ",
          "pattern": "^P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$",
          "default": "P7D"
        },
        "reprocessing_policy": {
          "type": "string",
          "description": "How to handle DLQ reprocessing",
          "enum": ["manual", "automatic", "scheduled"],
          "default": "manual"
        },
        "reprocessing_schedule": {
          "type": "string",
          "description": "Cron expression for scheduled reprocessing",
          "pattern": "^\\s*($|#|\\w+\\s*=|(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?(?:,(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?)*)\\s+(\\?|\\*|(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?(?:,(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?)*)\\s+(\\?|\\*|(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\\?|\\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\\s+(\\?|\\*|(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?)*|\\?|\\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\\s)+(\\?|\\*|(?:|\\d{4})(?:(?:-|\\/|\\,)(?:|\\d{4}))?(?:,(?:|\\d{4})(?:(?:-|\\/|\\,)(?:|\\d{4}))?)*))$"
        },
        "notification_settings": {
          "$ref": "#/$defs/NotificationSettings"
        }
      },
      "additionalProperties": false
    },

    "PriorityPolicy": {
      "type": "object",
      "title": "Priority Policy",
      "description": "Configuration for job priority handling",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether priority handling is enabled",
          "default": false
        },
        "priority_levels": {
          "type": "array",
          "description": "Available priority levels",
          "items": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Priority level name"
              },
              "value": {
                "type": "integer",
                "description": "Priority value (higher = more priority)",
                "minimum": 0,
                "maximum": 100
              },
              "weight": {
                "type": "number",
                "description": "Relative weight for weighted scheduling",
                "minimum": 0.1,
                "maximum": 10.0,
                "default": 1.0
              }
            }
          },
          "default": [
            {"name": "critical", "value": 100, "weight": 10.0},
            {"name": "high", "value": 75, "weight": 3.0},
            {"name": "normal", "value": 50, "weight": 1.0},
            {"name": "low", "value": 25, "weight": 0.3}
          ]
        },
        "scheduling_algorithm": {
          "type": "string",
          "description": "Priority scheduling algorithm",
          "enum": ["strict", "weighted_round_robin", "deficit_round_robin"],
          "default": "weighted_round_robin"
        },
        "starvation_prevention": {
          "type": "object",
          "description": "Settings to prevent low-priority job starvation",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "age_boost_factor": {
              "type": "number",
              "description": "Factor to boost priority based on age",
              "minimum": 0.0,
              "maximum": 10.0,
              "default": 1.0
            },
            "max_wait_time": {
              "type": "string",
              "description": "Maximum wait time before priority boost",
              "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
              "default": "PT10M"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "NotificationSettings": {
      "type": "object",
      "title": "Notification Settings",
      "description": "Configuration for system notifications",
      "properties": {
        "email": {
          "$ref": "#/$defs/EmailNotificationSettings"
        },
        "slack": {
          "$ref": "#/$defs/SlackNotificationSettings"
        },
        "webhook": {
          "$ref": "#/$defs/WebhookNotificationSettings"
        }
      },
      "additionalProperties": false
    },

    "EmailNotificationSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "email"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["dlq_threshold", "policy_applied", "simulation_completed", "errors"]
          }
        }
      }
    },

    "SlackNotificationSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "webhook_url": {
          "type": "string",
          "format": "uri"
        },
        "channel": {
          "type": "string",
          "pattern": "^#[a-z0-9-_]+$"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["dlq_threshold", "policy_applied", "simulation_completed", "errors"]
          }
        }
      }
    },

    "WebhookNotificationSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["dlq_threshold", "policy_applied", "simulation_completed", "errors"]
          }
        }
      }
    },

    "TrafficPattern": {
      "type": "object",
      "title": "Traffic Pattern",
      "description": "Configuration for simulated traffic patterns",
      "required": ["type", "parameters"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of traffic pattern",
          "enum": ["constant", "burst", "seasonal", "replay", "custom", "poisson", "step"]
        },
        "name": {
          "type": "string",
          "description": "Human-readable pattern name",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Pattern description",
          "maxLength": 500
        },
        "parameters": {
          "oneOf": [
            {"$ref": "#/$defs/ConstantPatternParameters"},
            {"$ref": "#/$defs/BurstPatternParameters"},
            {"$ref": "#/$defs/SeasonalPatternParameters"},
            {"$ref": "#/$defs/ReplayPatternParameters"},
            {"$ref": "#/$defs/PoissonPatternParameters"},
            {"$ref": "#/$defs/StepPatternParameters"},
            {"$ref": "#/$defs/CustomPatternParameters"}
          ]
        }
      },
      "additionalProperties": false
    },

    "ConstantPatternParameters": {
      "type": "object",
      "title": "Constant Pattern Parameters",
      "description": "Parameters for constant load traffic pattern",
      "required": ["rate"],
      "properties": {
        "rate": {
          "type": "number",
          "description": "Constant request rate (requests per second)",
          "minimum": 0.1,
          "maximum": 100000,
          "examples": [10, 100, 1000]
        }
      },
      "additionalProperties": false
    },

    "BurstPatternParameters": {
      "type": "object",
      "title": "Burst Pattern Parameters",
      "description": "Parameters for burst traffic pattern",
      "required": ["base_rate", "burst_rate", "burst_duration", "burst_interval"],
      "properties": {
        "base_rate": {
          "type": "number",
          "description": "Base request rate during normal periods",
          "minimum": 0,
          "maximum": 100000
        },
        "burst_rate": {
          "type": "number",
          "description": "Request rate during burst periods",
          "minimum": 0,
          "maximum": 100000
        },
        "burst_duration": {
          "type": "string",
          "description": "Duration of each burst",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "examples": ["PT5M", "PT30S", "PT1H"]
        },
        "burst_interval": {
          "type": "string",
          "description": "Time between burst starts",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "examples": ["PT30M", "PT1H", "PT4H"]
        },
        "burst_ramp_up": {
          "type": "string",
          "description": "Time to ramp up to burst rate",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT0S"
        },
        "burst_ramp_down": {
          "type": "string",
          "description": "Time to ramp down from burst rate",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT0S"
        }
      },
      "additionalProperties": false
    },

    "SeasonalPatternParameters": {
      "type": "object",
      "title": "Seasonal Pattern Parameters",
      "description": "Parameters for seasonal/cyclical traffic pattern",
      "required": ["base_rate", "amplitude", "period"],
      "properties": {
        "base_rate": {
          "type": "number",
          "description": "Base request rate (center of oscillation)",
          "minimum": 0,
          "maximum": 100000
        },
        "amplitude": {
          "type": "number",
          "description": "Amplitude of seasonal variation",
          "minimum": 0,
          "maximum": 100000
        },
        "period": {
          "type": "string",
          "description": "Period of seasonal cycle",
          "pattern": "^P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$",
          "examples": ["P1D", "PT24H", "P1W", "PT12H"]
        },
        "phase": {
          "type": "string",
          "description": "Phase offset for the cycle",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT0S"
        },
        "waveform": {
          "type": "string",
          "description": "Shape of the seasonal waveform",
          "enum": ["sine", "cosine", "triangle", "square", "sawtooth"],
          "default": "sine"
        },
        "noise_factor": {
          "type": "number",
          "description": "Random noise factor (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.0
        }
      },
      "additionalProperties": false
    },

    "ReplayPatternParameters": {
      "type": "object",
      "title": "Replay Pattern Parameters",
      "description": "Parameters for historical data replay",
      "required": ["data_source"],
      "properties": {
        "data_source": {
          "$ref": "#/$defs/DataSource"
        },
        "scale_factor": {
          "type": "number",
          "description": "Scale factor to apply to historical rates",
          "minimum": 0.1,
          "maximum": 100.0,
          "default": 1.0
        },
        "time_compression": {
          "type": "number",
          "description": "Factor to compress/expand time dimension",
          "minimum": 0.1,
          "maximum": 100.0,
          "default": 1.0
        },
        "loop": {
          "type": "boolean",
          "description": "Whether to loop the replay data",
          "default": false
        }
      },
      "additionalProperties": false
    },

    "PoissonPatternParameters": {
      "type": "object",
      "title": "Poisson Pattern Parameters",
      "description": "Parameters for Poisson arrival process",
      "required": ["lambda"],
      "properties": {
        "lambda": {
          "type": "number",
          "description": "Average arrival rate (events per time unit)",
          "minimum": 0.1,
          "maximum": 100000
        },
        "time_varying": {
          "type": "boolean",
          "description": "Whether lambda varies over time",
          "default": false
        },
        "lambda_function": {
          "type": "string",
          "description": "Mathematical expression for time-varying lambda",
          "examples": ["100 + 50*sin(2*pi*t/86400)", "t < 3600 ? 50 : 100"]
        }
      },
      "additionalProperties": false
    },

    "StepPatternParameters": {
      "type": "object",
      "title": "Step Pattern Parameters",
      "description": "Parameters for step function traffic pattern",
      "required": ["steps"],
      "properties": {
        "steps": {
          "type": "array",
          "description": "Array of step functions",
          "items": {
            "type": "object",
            "required": ["rate", "duration"],
            "properties": {
              "rate": {
                "type": "number",
                "description": "Request rate for this step",
                "minimum": 0,
                "maximum": 100000
              },
              "duration": {
                "type": "string",
                "description": "Duration of this step",
                "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$"
              }
            }
          },
          "minItems": 1
        },
        "loop": {
          "type": "boolean",
          "description": "Whether to loop through steps",
          "default": false
        }
      },
      "additionalProperties": false
    },

    "CustomPatternParameters": {
      "type": "object",
      "title": "Custom Pattern Parameters",
      "description": "Parameters for custom traffic patterns",
      "properties": {
        "function": {
          "type": "string",
          "description": "Mathematical expression defining rate as function of time",
          "examples": ["100*sin(t/3600) + 50", "t < 1800 ? 100 : 200"]
        },
        "data_points": {
          "type": "array",
          "description": "Explicit data points for interpolation",
          "items": {
            "type": "object",
            "required": ["time", "rate"],
            "properties": {
              "time": {
                "type": "number",
                "description": "Time offset in seconds"
              },
              "rate": {
                "type": "number",
                "description": "Request rate at this time"
              }
            }
          }
        },
        "interpolation": {
          "type": "string",
          "description": "Interpolation method for data points",
          "enum": ["linear", "cubic", "step", "spline"],
          "default": "linear"
        }
      },
      "oneOf": [
        {"required": ["function"]},
        {"required": ["data_points"]}
      ],
      "additionalProperties": false
    },

    "DataSource": {
      "type": "object",
      "title": "Data Source",
      "description": "Configuration for external data sources",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of data source",
          "enum": ["prometheus", "csv", "json", "database", "api"]
        },
        "config": {
          "oneOf": [
            {"$ref": "#/$defs/PrometheusDataSource"},
            {"$ref": "#/$defs/CSVDataSource"},
            {"$ref": "#/$defs/JSONDataSource"},
            {"$ref": "#/$defs/DatabaseDataSource"},
            {"$ref": "#/$defs/APIDataSource"}
          ]
        }
      },
      "additionalProperties": false
    },

    "PrometheusDataSource": {
      "type": "object",
      "title": "Prometheus Data Source",
      "required": ["query", "time_range"],
      "properties": {
        "endpoint": {
          "type": "string",
          "format": "uri",
          "description": "Prometheus server endpoint"
        },
        "query": {
          "type": "string",
          "description": "PromQL query to execute",
          "examples": ["rate(http_requests_total[5m])", "sum(queue_jobs_total)"]
        },
        "time_range": {
          "$ref": "#/$defs/TimeRange"
        },
        "step": {
          "type": "string",
          "description": "Query resolution step",
          "default": "1m"
        },
        "timeout": {
          "type": "string",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S"
        }
      },
      "additionalProperties": false
    },

    "CSVDataSource": {
      "type": "object",
      "title": "CSV Data Source",
      "required": ["file_path", "timestamp_column", "value_column"],
      "properties": {
        "file_path": {
          "type": "string",
          "description": "Path to CSV file"
        },
        "timestamp_column": {
          "type": "string",
          "description": "Name of timestamp column"
        },
        "value_column": {
          "type": "string",
          "description": "Name of value column"
        },
        "timestamp_format": {
          "type": "string",
          "description": "Timestamp format string",
          "default": "2006-01-02T15:04:05Z07:00"
        },
        "delimiter": {
          "type": "string",
          "description": "CSV delimiter character",
          "default": ","
        },
        "skip_header": {
          "type": "boolean",
          "description": "Whether to skip first row",
          "default": true
        }
      },
      "additionalProperties": false
    },

    "JSONDataSource": {
      "type": "object",
      "title": "JSON Data Source",
      "required": ["file_path"],
      "properties": {
        "file_path": {
          "type": "string",
          "description": "Path to JSON file"
        },
        "timestamp_path": {
          "type": "string",
          "description": "JSONPath to timestamp field",
          "default": "$.timestamp"
        },
        "value_path": {
          "type": "string",
          "description": "JSONPath to value field",
          "default": "$.value"
        },
        "array_path": {
          "type": "string",
          "description": "JSONPath to data array",
          "default": "$.data"
        }
      },
      "additionalProperties": false
    },

    "DatabaseDataSource": {
      "type": "object",
      "title": "Database Data Source",
      "required": ["connection_string", "query"],
      "properties": {
        "connection_string": {
          "type": "string",
          "description": "Database connection string"
        },
        "query": {
          "type": "string",
          "description": "SQL query to execute"
        },
        "driver": {
          "type": "string",
          "description": "Database driver",
          "enum": ["postgres", "mysql", "sqlite", "mssql"],
          "default": "postgres"
        },
        "timeout": {
          "type": "string",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S"
        }
      },
      "additionalProperties": false
    },

    "APIDataSource": {
      "type": "object",
      "title": "API Data Source",
      "required": ["url"],
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "API endpoint URL"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST"],
          "default": "GET"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "type": "string",
          "description": "Request body for POST requests"
        },
        "response_path": {
          "type": "string",
          "description": "JSONPath to data in response",
          "default": "$.data"
        },
        "timeout": {
          "type": "string",
          "pattern": "^PT?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$",
          "default": "PT30S"
        }
      },
      "additionalProperties": false
    },

    "TimeRange": {
      "type": "object",
      "title": "Time Range",
      "description": "Time range specification",
      "required": ["start", "end"],
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "Start time (ISO 8601)"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "End time (ISO 8601)"
        }
      },
      "additionalProperties": false
    },

    "SimulationResults": {
      "type": "object",
      "title": "Simulation Results",
      "description": "Results from a completed simulation",
      "properties": {
        "predictions": {
          "type": "array",
          "description": "Predicted metric values",
          "items": {
            "$ref": "#/$defs/Prediction"
          }
        },
        "metrics": {
          "$ref": "#/$defs/SimulationMetrics"
        },
        "confidence": {
          "type": "number",
          "description": "Overall confidence in results (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "assumptions": {
          "type": "array",
          "description": "Model assumptions and limitations",
          "items": {
            "type": "string"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings about simulation conditions",
          "items": {
            "type": "string"
          }
        },
        "model_info": {
          "$ref": "#/$defs/ModelInfo"
        },
        "performance_stats": {
          "$ref": "#/$defs/PerformanceStats"
        }
      },
      "additionalProperties": false
    },

    "Prediction": {
      "type": "object",
      "title": "Prediction",
      "description": "A single metric prediction",
      "required": ["metric", "value", "confidence_interval"],
      "properties": {
        "metric": {
          "type": "string",
          "description": "Metric name",
          "enum": [
            "throughput",
            "avg_latency",
            "p50_latency",
            "p95_latency",
            "p99_latency",
            "queue_length",
            "utilization",
            "error_rate",
            "wait_time",
            "response_time",
            "resource_usage"
          ]
        },
        "value": {
          "type": "number",
          "description": "Predicted value"
        },
        "unit": {
          "type": "string",
          "description": "Unit of measurement",
          "examples": ["requests/second", "milliseconds", "percent", "jobs"]
        },
        "confidence_interval": {
          "$ref": "#/$defs/ConfidenceInterval"
        },
        "trend": {
          "type": "string",
          "description": "Trend compared to current state",
          "enum": ["improving", "degrading", "stable", "unknown"]
        },
        "change_percentage": {
          "type": "number",
          "description": "Percentage change from baseline"
        },
        "baseline_value": {
          "type": "number",
          "description": "Current baseline value for comparison"
        }
      },
      "additionalProperties": false
    },

    "ConfidenceInterval": {
      "type": "object",
      "title": "Confidence Interval",
      "description": "Statistical confidence interval for predictions",
      "required": ["lower", "upper", "confidence"],
      "properties": {
        "lower": {
          "type": "number",
          "description": "Lower bound of confidence interval"
        },
        "upper": {
          "type": "number",
          "description": "Upper bound of confidence interval"
        },
        "confidence": {
          "type": "number",
          "description": "Confidence level (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "method": {
          "type": "string",
          "description": "Method used to calculate interval",
          "enum": ["bootstrap", "analytical", "monte_carlo", "jackknife"]
        }
      },
      "additionalProperties": false
    },

    "SimulationMetrics": {
      "type": "object",
      "title": "Simulation Metrics",
      "description": "Detailed metrics from simulation execution",
      "properties": {
        "avg_queue_length": {
          "type": "number",
          "description": "Average number of jobs in queue",
          "minimum": 0
        },
        "max_queue_length": {
          "type": "number",
          "description": "Maximum observed queue length",
          "minimum": 0
        },
        "avg_wait_time": {
          "type": "number",
          "description": "Average time jobs spend waiting (seconds)",
          "minimum": 0
        },
        "max_wait_time": {
          "type": "number",
          "description": "Maximum observed wait time (seconds)",
          "minimum": 0
        },
        "avg_service_time": {
          "type": "number",
          "description": "Average time to process jobs (seconds)",
          "minimum": 0
        },
        "utilization": {
          "type": "number",
          "description": "System utilization (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "throughput": {
          "type": "number",
          "description": "Jobs processed per second",
          "minimum": 0
        },
        "error_rate": {
          "type": "number",
          "description": "Job failure rate (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "abandonment_rate": {
          "type": "number",
          "description": "Rate of jobs abandoned/timeout (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "resource_usage": {
          "$ref": "#/$defs/ResourceUsage"
        },
        "latency_percentiles": {
          "$ref": "#/$defs/LatencyPercentiles"
        },
        "queue_length_over_time": {
          "type": "array",
          "description": "Queue length samples over time",
          "items": {
            "$ref": "#/$defs/TimeSeries"
          }
        }
      },
      "additionalProperties": false
    },

    "ResourceUsage": {
      "type": "object",
      "title": "Resource Usage",
      "description": "System resource utilization metrics",
      "properties": {
        "cpu_utilization": {
          "type": "number",
          "description": "CPU usage percentage (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "memory_usage": {
          "type": "number",
          "description": "Memory usage in bytes",
          "minimum": 0
        },
        "memory_utilization": {
          "type": "number",
          "description": "Memory usage percentage (0.0-1.0)",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "network_io_bytes": {
          "type": "number",
          "description": "Network I/O bytes per second",
          "minimum": 0
        },
        "disk_io_ops": {
          "type": "number",
          "description": "Disk I/O operations per second",
          "minimum": 0
        },
        "disk_io_bytes": {
          "type": "number",
          "description": "Disk I/O bytes per second",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },

    "LatencyPercentiles": {
      "type": "object",
      "title": "Latency Percentiles",
      "description": "Response time percentile distribution",
      "properties": {
        "p50": {
          "type": "number",
          "description": "50th percentile latency (seconds)",
          "minimum": 0
        },
        "p75": {
          "type": "number",
          "description": "75th percentile latency (seconds)",
          "minimum": 0
        },
        "p90": {
          "type": "number",
          "description": "90th percentile latency (seconds)",
          "minimum": 0
        },
        "p95": {
          "type": "number",
          "description": "95th percentile latency (seconds)",
          "minimum": 0
        },
        "p99": {
          "type": "number",
          "description": "99th percentile latency (seconds)",
          "minimum": 0
        },
        "p99_9": {
          "type": "number",
          "description": "99.9th percentile latency (seconds)",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },

    "TimeSeries": {
      "type": "object",
      "title": "Time Series Data Point",
      "description": "A single time series measurement",
      "required": ["timestamp", "value"],
      "properties": {
        "timestamp": {
          "type": "number",
          "description": "Unix timestamp (seconds since epoch)"
        },
        "value": {
          "type": "number",
          "description": "Measured value at this timestamp"
        }
      },
      "additionalProperties": false
    },

    "ModelInfo": {
      "type": "object",
      "title": "Model Information",
      "description": "Information about the queueing model used",
      "properties": {
        "name": {
          "type": "string",
          "description": "Model name (e.g., 'M/M/1', 'M/M/c')"
        },
        "description": {
          "type": "string",
          "description": "Human-readable model description"
        },
        "parameters": {
          "type": "object",
          "description": "Model parameters used in simulation",
          "additionalProperties": true
        },
        "stability_check": {
          "type": "object",
          "description": "Results of stability condition check",
          "properties": {
            "stable": {
              "type": "boolean",
              "description": "Whether the system is stable"
            },
            "utilization": {
              "type": "number",
              "description": "System utilization factor"
            },
            "condition": {
              "type": "string",
              "description": "Stability condition expression"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "PerformanceStats": {
      "type": "object",
      "title": "Performance Statistics",
      "description": "Performance metrics for the simulation execution",
      "properties": {
        "execution_time": {
          "type": "number",
          "description": "Simulation execution time (seconds)"
        },
        "events_processed": {
          "type": "integer",
          "description": "Total number of events processed"
        },
        "events_per_second": {
          "type": "number",
          "description": "Event processing rate"
        },
        "memory_peak": {
          "type": "number",
          "description": "Peak memory usage (bytes)"
        },
        "cpu_time": {
          "type": "number",
          "description": "CPU time consumed (seconds)"
        },
        "convergence_iterations": {
          "type": "integer",
          "description": "Number of iterations to convergence"
        }
      },
      "additionalProperties": false
    }
  }
}