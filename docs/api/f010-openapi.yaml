openapi: 3.0.3
info:
  title: Anomaly Radar + SLO Budget API
  description: |
    API for managing Service Level Objectives (SLOs), error budgets, and real-time anomaly detection
    in the Redis work queue system. Provides comprehensive SRE-grade monitoring capabilities with
    burn rate tracking, threshold-based alerting, and statistical analysis.

    ## Features
    - Real-time SLO monitoring and error budget tracking
    - Configurable burn rate alerts and thresholds
    - Statistical anomaly detection with rolling windows
    - Comprehensive alert management and acknowledgment
    - Performance-optimized metrics collection with sampling

    ## Authentication
    All endpoints require JWT authentication with appropriate role-based permissions:
    - `slo:viewer` - Read-only access to metrics and alerts
    - `slo:operator` - Can acknowledge alerts and view detailed metrics
    - `slo:admin` - Full configuration and management access
  version: 1.0.0
  contact:
    name: SRE Team
    email: sre@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.workqueue.company.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /slo/config:
    get:
      summary: Get SLO configuration
      description: Retrieve current SLO configuration including targets, windows, and thresholds
      operationId: getSLOConfig
      tags:
        - Configuration
      responses:
        '200':
          description: SLO configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOConfig'
              example:
                name: "payment-processing"
                description: "Payment queue SLO monitoring"
                target: 0.999
                window: "30d"
                budget_reset: "monthly"
                success_threshold:
                  latency_threshold: "500ms"
                burn_rate_thresholds:
                  warning: 2.0
                  critical: 6.0
                  page_on_critical: true
                sampling_rate: 0.1
                update_interval: "1s"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      summary: Update SLO configuration
      description: Update SLO targets, windows, and alerting thresholds
      operationId: updateSLOConfig
      tags:
        - Configuration
      security:
        - BearerAuth: [slo:admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SLOConfig'
            example:
              target: 0.9995
              burn_rate_thresholds:
                warning: 1.5
                critical: 5.0
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          description: Invalid configuration values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /slo/config/validate:
    post:
      summary: Validate SLO configuration
      description: Validate SLO configuration without applying changes
      operationId: validateSLOConfig
      tags:
        - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SLOConfig'
      responses:
        '200':
          description: Configuration is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  warnings:
                    type: array
                    items:
                      type: string
                    example: ["Burn rate threshold may be too sensitive"]
        '400':
          description: Configuration is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /slo/metrics:
    get:
      summary: Get current SLO metrics
      description: Retrieve real-time SLO metrics including success rates, error budgets, and burn rates
      operationId: getSLOMetrics
      tags:
        - Metrics
      parameters:
        - name: window
          in: query
          description: Time window for metrics calculation
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: 24h
        - name: include_trends
          in: query
          description: Include trend analysis in response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Current SLO metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOMetrics'
              example:
                timestamp: "2024-01-15T10:30:00Z"
                window_start: "2024-01-14T10:30:00Z"
                window_end: "2024-01-15T10:30:00Z"
                total_requests: 96543
                successful_jobs: 96416
                failed_jobs: 127
                success_rate: 0.9987
                p95_latency: "245ms"
                backlog_size: 1247
                error_budget:
                  total: "8640s"
                  consumed: "7516s"
                  remaining: "1124s"
                  percentage: 0.87
                burn_rate:
                  current: 2.3
                  alert_level: "warning"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /slo/metrics/history:
    get:
      summary: Get historical SLO metrics
      description: Retrieve time-series SLO metrics for trend analysis and reporting
      operationId: getSLOMetricsHistory
      tags:
        - Metrics
      parameters:
        - name: start_time
          in: query
          required: true
          description: Start time for historical data (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          required: true
          description: End time for historical data (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: resolution
          in: query
          description: Data point resolution
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 1d]
            default: 5m
        - name: limit
          in: query
          description: Maximum number of data points to return
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
      responses:
        '200':
          description: Historical SLO metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SLOMetrics'
                  metadata:
                    $ref: '#/components/schemas/MetricsMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /slo/budget:
    get:
      summary: Get error budget status
      description: Retrieve detailed error budget information including consumption and projections
      operationId: getErrorBudget
      tags:
        - Budget
      responses:
        '200':
          description: Error budget status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBudgetStatus'
              example:
                current_budget:
                  total: "8640s"
                  consumed: "7516s"
                  remaining: "1124s"
                  percentage: 0.87
                burn_rate:
                  current: 2.3
                  average: 1.8
                  peak: 4.1
                projections:
                  time_to_exhaustion: "3.7d"
                  end_of_period_consumption: 0.95

    post:
      summary: Reset error budget
      description: Reset the error budget for the current period (admin only)
      operationId: resetErrorBudget
      tags:
        - Budget
      security:
        - BearerAuth: [slo:admin]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for budget reset
                  example: "Emergency maintenance completed"
                new_period_start:
                  type: string
                  format: date-time
                  description: Optional new period start time
      responses:
        '200':
          description: Budget reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBudgetStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /slo/alerts:
    get:
      summary: Get SLO alerts
      description: Retrieve current and historical SLO alerts with filtering options
      operationId: getSLOAlerts
      tags:
        - Alerts
      parameters:
        - name: status
          in: query
          description: Filter alerts by status
          schema:
            type: string
            enum: [active, acknowledged, resolved, all]
            default: active
        - name: severity
          in: query
          description: Filter alerts by severity
          schema:
            type: string
            enum: [info, warning, critical]
        - name: type
          in: query
          description: Filter alerts by type
          schema:
            type: string
            enum: [burn_rate, slo_breach, latency, backlog, anomaly]
        - name: limit
          in: query
          description: Maximum number of alerts to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of alerts to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: SLO alerts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/SLOAlert'
                  total:
                    type: integer
                    description: Total number of alerts matching criteria
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /slo/alerts/{alertId}/acknowledge:
    post:
      summary: Acknowledge SLO alert
      description: Acknowledge an active SLO alert to suppress notifications
      operationId: acknowledgeSLOAlert
      tags:
        - Alerts
      security:
        - BearerAuth: [slo:operator]
      parameters:
        - name: alertId
          in: path
          required: true
          description: Alert identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: Optional acknowledgment comment
                  example: "Investigating issue with payment processor"
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOAlert'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Alert not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /slo/alerts/{alertId}/resolve:
    post:
      summary: Resolve SLO alert
      description: Mark an SLO alert as resolved
      operationId: resolveSLOAlert
      tags:
        - Alerts
      security:
        - BearerAuth: [slo:operator]
      parameters:
        - name: alertId
          in: path
          required: true
          description: Alert identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution:
                  type: string
                  description: Resolution details
                  example: "Fixed by scaling up worker instances"
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOAlert'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Alert not found

  /slo/thresholds:
    get:
      summary: Get alert thresholds
      description: Retrieve current alerting thresholds and colorization rules
      operationId: getAlertThresholds
      tags:
        - Configuration
      responses:
        '200':
          description: Alert thresholds retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThresholdConfig'
              example:
                success_rate:
                  warning: 0.995
                  critical: 0.99
                burn_rate:
                  warning: 2.0
                  critical: 6.0
                latency:
                  p95_warning: "400ms"
                  p95_critical: "800ms"
                backlog:
                  growth_warning: 100
                  size_critical: 10000

    put:
      summary: Update alert thresholds
      description: Update alerting thresholds and colorization rules
      operationId: updateAlertThresholds
      tags:
        - Configuration
      security:
        - BearerAuth: [slo:admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThresholdConfig'
      responses:
        '200':
          description: Thresholds updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThresholdConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /slo/anomalies:
    get:
      summary: Get detected anomalies
      description: Retrieve statistical anomalies detected in SLO metrics
      operationId: getDetectedAnomalies
      tags:
        - Anomalies
      parameters:
        - name: time_range
          in: query
          description: Time range for anomaly detection
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d]
            default: 24h
        - name: confidence_threshold
          in: query
          description: Minimum confidence level for anomaly detection
          schema:
            type: number
            minimum: 0.5
            maximum: 0.99
            default: 0.95
      responses:
        '200':
          description: Detected anomalies
          content:
            application/json:
              schema:
                type: object
                properties:
                  anomalies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Anomaly'
                  detection_metadata:
                    $ref: '#/components/schemas/AnomalyDetectionMetadata'

  /slo/health:
    get:
      summary: Get SLO monitor health
      description: Health check endpoint for SLO monitoring system
      operationId: getSLOHealth
      tags:
        - System
      responses:
        '200':
          description: SLO monitor is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "healthy"
                uptime: "72h15m"
                metrics_lag: "0.5s"
                last_update: "2024-01-15T10:30:00Z"
                components:
                  calculator: "healthy"
                  storage: "healthy"
                  alerting: "healthy"
        '503':
          description: SLO monitor is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /slo/export:
    get:
      summary: Export SLO data
      description: Export SLO metrics and configuration in various formats
      operationId: exportSLOData
      tags:
        - Export
      parameters:
        - name: format
          in: query
          required: true
          description: Export format
          schema:
            type: string
            enum: [json, csv, prometheus]
        - name: start_time
          in: query
          description: Start time for data export (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: End time for data export (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: include_config
          in: query
          description: Include SLO configuration in export
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Data exported successfully
          content:
            application/json:
              schema:
                type: object
            text/csv:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SLOConfig:
      type: object
      required:
        - name
        - target
        - window
      properties:
        name:
          type: string
          description: Unique SLO name identifier
          example: "payment-processing"
        description:
          type: string
          description: Human-readable SLO description
          example: "Payment queue SLO monitoring"
        target:
          type: number
          minimum: 0.5
          maximum: 1.0
          description: SLO target as decimal (0.999 = 99.9%)
          example: 0.999
        window:
          type: string
          enum: [1h, 6h, 24h, 7d, 30d]
          description: Time window for SLO calculation
          example: "30d"
        budget_reset:
          type: string
          enum: [hourly, daily, weekly, monthly]
          description: Error budget reset frequency
          example: "monthly"
        success_threshold:
          $ref: '#/components/schemas/SuccessThreshold'
        burn_rate_thresholds:
          $ref: '#/components/schemas/BurnRateConfig'
        sampling_rate:
          type: number
          minimum: 0.001
          maximum: 1.0
          description: Sampling rate for metrics collection (0.1 = 10%)
          example: 0.1
        update_interval:
          type: string
          pattern: '^\\d+[smh]$'
          description: Metrics update interval
          example: "1s"
        display_format:
          type: string
          enum: [compact, detailed, minimal]
          description: TUI display format preference
          default: compact
        color_thresholds:
          $ref: '#/components/schemas/ColorConfig'

    SuccessThreshold:
      type: object
      properties:
        latency_threshold:
          type: string
          pattern: '^\\d+(\\.\\d+)?(ms|s)$'
          description: Maximum latency for successful request
          example: "500ms"

    BurnRateConfig:
      type: object
      required:
        - warning
        - critical
      properties:
        warning:
          type: number
          minimum: 1.0
          description: Burn rate multiplier for warning alerts
          example: 2.0
        critical:
          type: number
          minimum: 1.0
          description: Burn rate multiplier for critical alerts
          example: 6.0
        page_on_critical:
          type: boolean
          description: Whether to send page alerts on critical burn rate
          default: true

    ColorConfig:
      type: object
      properties:
        healthy:
          type: string
          enum: [green, blue, cyan]
          default: green
        warning:
          type: string
          enum: [yellow, orange]
          default: yellow
        critical:
          type: string
          enum: [red, magenta]
          default: red
        info:
          type: string
          enum: [blue, cyan, white]
          default: blue

    SLOMetrics:
      type: object
      required:
        - timestamp
        - window_start
        - window_end
        - total_requests
        - successful_jobs
        - failed_jobs
        - success_rate
      properties:
        timestamp:
          type: string
          format: date-time
          description: Metrics timestamp (ISO 8601)
        window_start:
          type: string
          format: date-time
          description: Start of measurement window
        window_end:
          type: string
          format: date-time
          description: End of measurement window
        total_requests:
          type: integer
          minimum: 0
          description: Total number of requests in window
        successful_jobs:
          type: integer
          minimum: 0
          description: Number of successful jobs
        failed_jobs:
          type: integer
          minimum: 0
          description: Number of failed jobs
        success_rate:
          type: number
          minimum: 0
          maximum: 1
          description: Success rate as decimal (0.999 = 99.9%)
        p50_latency:
          type: string
          pattern: '^\\d+(\\.\\d+)?(ms|s)$'
          description: 50th percentile latency
        p95_latency:
          type: string
          pattern: '^\\d+(\\.\\d+)?(ms|s)$'
          description: 95th percentile latency
        p99_latency:
          type: string
          pattern: '^\\d+(\\.\\d+)?(ms|s)$'
          description: 99th percentile latency
        avg_latency:
          type: string
          pattern: '^\\d+(\\.\\d+)?(ms|s)$'
          description: Average latency
        backlog_size:
          type: integer
          minimum: 0
          description: Current queue backlog size
        backlog_growth:
          type: number
          description: Backlog growth rate (jobs/second)
        processing_rate:
          type: number
          description: Job processing rate (jobs/second)
        error_budget:
          $ref: '#/components/schemas/ErrorBudget'
        burn_rate:
          $ref: '#/components/schemas/BurnRate'
        trends:
          $ref: '#/components/schemas/TrendMetrics'

    ErrorBudget:
      type: object
      required:
        - total
        - consumed
        - remaining
        - percentage
      properties:
        total:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smhd]$'
          description: Total error budget for window
        consumed:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smhd]$'
          description: Error budget consumed so far
        remaining:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smhd]$'
          description: Error budget remaining
        percentage:
          type: number
          minimum: 0
          maximum: 1
          description: Percentage of budget consumed (0.87 = 87%)
        time_left:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smhd]$'
          description: Time until budget exhausted at current rate

    BurnRate:
      type: object
      required:
        - current
        - alert_level
      properties:
        current:
          type: number
          minimum: 0
          description: Current burn rate multiplier
        average:
          type: number
          minimum: 0
          description: Average burn rate over window
        peak:
          type: number
          minimum: 0
          description: Peak burn rate in window
        trend:
          type: string
          enum: [increasing, decreasing, stable]
          description: Burn rate trend direction
        alert_level:
          type: string
          enum: [ok, warning, critical]
          description: Current alert level based on thresholds

    TrendMetrics:
      type: object
      properties:
        success_rate_change:
          type: number
          description: Percentage change in success rate over last hour
        latency_change:
          type: number
          description: Percentage change in P95 latency over last hour
        backlog_growth_trend:
          type: string
          enum: [growing, shrinking, stable]
          description: Backlog growth trend
        error_rate_spike:
          type: boolean
          description: Whether an error rate spike was detected

    SLOAlert:
      type: object
      required:
        - id
        - timestamp
        - slo_name
        - severity
        - type
        - message
        - status
      properties:
        id:
          type: string
          description: Unique alert identifier
          example: "alert_001_burn_rate_critical"
        timestamp:
          type: string
          format: date-time
          description: Alert creation timestamp
        slo_name:
          type: string
          description: Name of the SLO that triggered the alert
        severity:
          type: string
          enum: [info, warning, critical]
          description: Alert severity level
        type:
          type: string
          enum: [burn_rate, slo_breach, latency, backlog, anomaly]
          description: Type of alert condition
        message:
          type: string
          description: Human-readable alert message
          example: "Burn rate is 2.3x above normal, budget will be exhausted in 3.7 days"
        cause:
          type: string
          description: Detailed cause of the alert
          example: "Error rate increased to 2% from baseline 0.1%"
        current_value:
          type: number
          description: Current metric value that triggered alert
        threshold:
          type: number
          description: Threshold value that was exceeded
        burn_rate:
          type: number
          description: Current burn rate (for burn rate alerts)
        time_to_exhaustion:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smhd]$'
          description: Time until budget exhaustion (for burn rate alerts)
        status:
          type: string
          enum: [active, acknowledged, resolved]
          description: Current alert status
        acked_by:
          type: string
          description: User who acknowledged the alert
        acked_at:
          type: string
          format: date-time
          description: When the alert was acknowledged
        resolved_at:
          type: string
          format: date-time
          description: When the alert was resolved

    ErrorBudgetStatus:
      type: object
      required:
        - current_budget
        - burn_rate
      properties:
        current_budget:
          $ref: '#/components/schemas/ErrorBudget'
        burn_rate:
          $ref: '#/components/schemas/BurnRate'
        projections:
          type: object
          properties:
            time_to_exhaustion:
              type: string
              pattern: '^\\d+(\\.\\d+)?[smhd]$'
              description: Projected time until budget exhaustion
            end_of_period_consumption:
              type: number
              minimum: 0
              maximum: 2
              description: Projected budget consumption at end of period

    ThresholdConfig:
      type: object
      properties:
        success_rate:
          type: object
          properties:
            warning:
              type: number
              minimum: 0
              maximum: 1
            critical:
              type: number
              minimum: 0
              maximum: 1
        burn_rate:
          $ref: '#/components/schemas/BurnRateConfig'
        latency:
          type: object
          properties:
            p95_warning:
              type: string
              pattern: '^\\d+(\\.\\d+)?(ms|s)$'
            p95_critical:
              type: string
              pattern: '^\\d+(\\.\\d+)?(ms|s)$'
        backlog:
          type: object
          properties:
            growth_warning:
              type: integer
              minimum: 0
              description: Backlog growth rate warning threshold (jobs/sec)
            size_critical:
              type: integer
              minimum: 0
              description: Backlog size critical threshold

    Anomaly:
      type: object
      required:
        - id
        - timestamp
        - metric
        - confidence
        - description
      properties:
        id:
          type: string
          description: Unique anomaly identifier
        timestamp:
          type: string
          format: date-time
          description: When the anomaly was detected
        metric:
          type: string
          enum: [success_rate, latency, backlog, throughput]
          description: Metric where anomaly was detected
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level of anomaly detection
        description:
          type: string
          description: Human-readable anomaly description
        severity:
          type: string
          enum: [low, medium, high]
          description: Estimated severity of the anomaly
        current_value:
          type: number
          description: Current metric value
        expected_value:
          type: number
          description: Expected metric value based on historical data
        deviation:
          type: number
          description: Standard deviations from expected value

    AnomalyDetectionMetadata:
      type: object
      properties:
        algorithm:
          type: string
          description: Anomaly detection algorithm used
        model_version:
          type: string
          description: Version of the detection model
        training_period:
          type: string
          description: Period used for model training
        last_trained:
          type: string
          format: date-time
          description: When the model was last trained

    HealthStatus:
      type: object
      required:
        - status
        - last_update
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall health status
        uptime:
          type: string
          pattern: '^\\d+[dhms]+$'
          description: System uptime
        metrics_lag:
          type: string
          pattern: '^\\d+(\\.\\d+)?[smh]$'
          description: Current metrics processing lag
        last_update:
          type: string
          format: date-time
          description: Last successful metrics update
        components:
          type: object
          properties:
            calculator:
              type: string
              enum: [healthy, degraded, unhealthy]
            storage:
              type: string
              enum: [healthy, degraded, unhealthy]
            alerting:
              type: string
              enum: [healthy, degraded, unhealthy]

    MetricsMetadata:
      type: object
      properties:
        total_points:
          type: integer
          description: Total number of data points
        resolution:
          type: string
          description: Data resolution used
        aggregation:
          type: string
          enum: [avg, max, min, sum]
          description: Aggregation method applied
        sampling_rate:
          type: number
          description: Sampling rate used for data collection

    PaginationInfo:
      type: object
      properties:
        limit:
          type: integer
          description: Number of items per page
        offset:
          type: integer
          description: Number of items skipped
        total:
          type: integer
          description: Total number of items
        has_more:
          type: boolean
          description: Whether more items are available

    Error:
      type: object
      required:
        - error
        - code
        - timestamp
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    ValidationError:
      type: object
      required:
        - error
        - code
        - validation_errors
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        validation_errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name with validation error
              message:
                type: string
                description: Validation error message
              value:
                description: Invalid value provided
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

  responses:
    BadRequest:
      description: Invalid request parameters or body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid window parameter"
            code: "INVALID_PARAMETER"
            timestamp: "2024-01-15T10:30:00Z"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Authentication required"
            code: "UNAUTHORIZED"
            timestamp: "2024-01-15T10:30:00Z"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Insufficient permissions for this operation"
            code: "FORBIDDEN"
            timestamp: "2024-01-15T10:30:00Z"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: "INTERNAL_ERROR"
            timestamp: "2024-01-15T10:30:00Z"

tags:
  - name: Configuration
    description: SLO configuration management
  - name: Metrics
    description: Real-time and historical SLO metrics
  - name: Budget
    description: Error budget tracking and management
  - name: Alerts
    description: SLO alert management and acknowledgment
  - name: Anomalies
    description: Statistical anomaly detection
  - name: System
    description: System health and monitoring
  - name: Export
    description: Data export capabilities