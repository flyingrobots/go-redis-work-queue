openapi: 3.0.3
info:
  title: Multi-Tenant Isolation API
  description: API for managing tenant isolation, quotas, encryption, and access control in the Redis Work Queue system
  version: 1.0.0
  contact:
    name: Platform Team
    email: platform@example.com

servers:
  - url: https://api.queue.example.com/v1
    description: Production API
  - url: https://staging-api.queue.example.com/v1
    description: Staging API

security:
  - ApiKeyAuth: []
  - BearerAuth: []

tags:
  - name: tenants
    description: Tenant management operations
  - name: quotas
    description: Quota management and monitoring
  - name: encryption
    description: Encryption key management
  - name: access
    description: Access control and permissions
  - name: audit
    description: Audit log queries

paths:
  /tenants:
    get:
      tags: [tenants]
      summary: List all tenants
      description: Returns a paginated list of all tenants in the system
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, pending]
      responses:
        200:
          description: List of tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenants:
                    type: array
                    items:
                      $ref: '#/components/schemas/TenantSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [tenants]
      summary: Create a new tenant
      description: Creates a new tenant with specified configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        201:
          description: Tenant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          description: Tenant already exists

  /tenants/{tenantId}:
    get:
      tags: [tenants]
      summary: Get tenant details
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        200:
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags: [tenants]
      summary: Update tenant configuration
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequest'
      responses:
        200:
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [tenants]
      summary: Delete a tenant
      description: Deletes a tenant and all associated data
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: force
          in: query
          schema:
            type: boolean
            default: false
          description: Force deletion even with active queues
      responses:
        204:
          description: Tenant deleted
        404:
          $ref: '#/components/responses/NotFound'
        409:
          description: Cannot delete tenant with active resources

  /tenants/{tenantId}/quotas:
    get:
      tags: [quotas]
      summary: Get tenant quotas
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        200:
          description: Tenant quota configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantQuotas'

    put:
      tags: [quotas]
      summary: Update tenant quotas
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantQuotas'
      responses:
        200:
          description: Quotas updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantQuotas'

  /tenants/{tenantId}/usage:
    get:
      tags: [quotas]
      summary: Get current quota usage
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: period
          in: query
          schema:
            type: string
            enum: [hour, day, month]
            default: day
      responses:
        200:
          description: Current usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaUsage'

  /tenants/{tenantId}/encryption:
    get:
      tags: [encryption]
      summary: Get encryption configuration
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        200:
          description: Encryption configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionConfig'

    put:
      tags: [encryption]
      summary: Update encryption settings
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionConfig'
      responses:
        200:
          description: Encryption settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionConfig'

  /tenants/{tenantId}/encryption/rotate:
    post:
      tags: [encryption]
      summary: Rotate encryption keys
      description: Initiates key rotation for the tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                immediate:
                  type: boolean
                  default: false
                  description: Rotate immediately vs scheduled
      responses:
        202:
          description: Key rotation initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  rotation_id:
                    type: string
                  scheduled_at:
                    type: string
                    format: date-time

  /tenants/{tenantId}/access:
    get:
      tags: [access]
      summary: List users with tenant access
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        200:
          description: List of users with access
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAccess'

    post:
      tags: [access]
      summary: Grant user access to tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantAccessRequest'
      responses:
        201:
          description: Access granted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccess'

  /tenants/{tenantId}/access/{userId}:
    delete:
      tags: [access]
      summary: Revoke user access
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Access revoked
        404:
          $ref: '#/components/responses/NotFound'

  /tenants/{tenantId}/audit:
    get:
      tags: [audit]
      summary: Query audit logs
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - name: action
          in: query
          schema:
            type: string
            enum: [CREATE, UPDATE, DELETE, ENQUEUE, DEQUEUE, ACCESS_DENIED]
        - name: user_id
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: Audit log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditEvent'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /tenants/{tenantId}/queues:
    get:
      tags: [tenants]
      summary: List tenant queues
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        200:
          description: List of queues for tenant
          content:
            application/json:
              schema:
                type: object
                properties:
                  queues:
                    type: array
                    items:
                      $ref: '#/components/schemas/QueueSummary'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer

  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
        minLength: 3
        maxLength: 32
      description: Tenant identifier

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    TenantSummary:
      type: object
      required: [id, name, status, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, suspended, pending]
        active_queues:
          type: integer
        quota_usage:
          type: number
          format: float
          description: Percentage of quota used
        created_at:
          type: string
          format: date-time

    Tenant:
      type: object
      required: [id, name, status, config, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, suspended, pending]
        config:
          $ref: '#/components/schemas/TenantConfig'
        quotas:
          $ref: '#/components/schemas/TenantQuotas'
        encryption:
          $ref: '#/components/schemas/EncryptionConfig'
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTenantRequest:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          pattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
          minLength: 3
          maxLength: 32
        name:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/TenantConfig'
        quotas:
          $ref: '#/components/schemas/TenantQuotas'
        encryption:
          $ref: '#/components/schemas/EncryptionConfig'
        metadata:
          type: object

    UpdateTenantRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, suspended]
        config:
          $ref: '#/components/schemas/TenantConfig'
        metadata:
          type: object

    TenantConfig:
      type: object
      properties:
        isolation_level:
          type: string
          enum: [strict, standard, relaxed]
          default: standard
        enable_audit:
          type: boolean
          default: true
        enable_metrics:
          type: boolean
          default: true
        default_queue_ttl:
          type: integer
          description: Default TTL for jobs in seconds
        max_job_retries:
          type: integer
          default: 3

    TenantQuotas:
      type: object
      properties:
        max_jobs_per_hour:
          type: integer
          minimum: 0
        max_jobs_per_day:
          type: integer
          minimum: 0
        max_backlog_size:
          type: integer
          minimum: 0
        max_job_size_bytes:
          type: integer
          minimum: 0
        max_queues_per_tenant:
          type: integer
          minimum: 0
        max_workers_per_queue:
          type: integer
          minimum: 0
        max_storage_bytes:
          type: integer
          minimum: 0
        enqueue_rate_limit:
          type: integer
          minimum: 0
          description: Enqueues per second
        dequeue_rate_limit:
          type: integer
          minimum: 0
          description: Dequeues per second
        soft_limit_threshold:
          type: number
          format: float
          minimum: 0
          maximum: 1
          default: 0.8

    QuotaUsage:
      type: object
      properties:
        jobs_this_hour:
          type: integer
        jobs_this_day:
          type: integer
        current_backlog_size:
          type: integer
        storage_used_bytes:
          type: integer
        active_queues:
          type: integer
        active_workers:
          type: integer
        quota_percentages:
          type: object
          additionalProperties:
            type: number
            format: float
        last_updated:
          type: string
          format: date-time

    EncryptionConfig:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        kek_provider:
          type: string
          enum: [aws-kms, gcp-kms, azure-kv, local]
        kek_key_id:
          type: string
          description: KMS key identifier
        algorithm:
          type: string
          enum: [AES-256-GCM, AES-128-GCM]
          default: AES-256-GCM
        dek_rotation_period:
          type: string
          description: ISO 8601 duration (e.g., P30D for 30 days)
        last_rotation:
          type: string
          format: date-time
        auto_rotate:
          type: boolean
          default: true

    UserAccess:
      type: object
      properties:
        user_id:
          type: string
        tenant_id:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        granted_by:
          type: string
        granted_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    Permission:
      type: object
      properties:
        resource:
          type: string
          enum: [queues, workers, metrics, config, audit, '*']
        actions:
          type: array
          items:
            type: string
            enum: [read, write, admin, '*']
        queue_filter:
          type: string
          description: Optional queue name pattern

    GrantAccessRequest:
      type: object
      required: [user_id, permissions]
      properties:
        user_id:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        expires_at:
          type: string
          format: date-time

    AuditEvent:
      type: object
      properties:
        event_id:
          type: string
        timestamp:
          type: string
          format: date-time
        tenant_id:
          type: string
        user_id:
          type: string
        action:
          type: string
        resource:
          type: string
        details:
          type: object
        remote_ip:
          type: string
        user_agent:
          type: string
        result:
          type: string
          enum: [SUCCESS, DENIED, ERROR]
        error_code:
          type: string

    QueueSummary:
      type: object
      properties:
        name:
          type: string
        jobs_pending:
          type: integer
        jobs_processing:
          type: integer
        workers_active:
          type: integer
        encryption_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer