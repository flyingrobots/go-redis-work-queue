openapi: 3.1.0
info:
  title: Anomaly Radar + SLO Budget API
  version: 1.0.0-draft
  description: >-
    Draft specification for the Anomaly Radar and SLO Budget HTTP API. This document captures the
    current endpoints described in docs/api/anomaly-radar-slo-budget.md and will evolve alongside the
    implementation.
servers:
  - url: https://example.com
    description: Production
  - url: http://localhost:8080
    description: Local development
security:
  - bearerAuth: []
paths:
  /api/v1/anomaly-radar/status:
    get:
      summary: Get current anomaly status and SLO budget snapshot
      tags: [Anomaly Radar]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current anomaly radar status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/config:
    get:
      summary: Fetch the current configuration
      tags: [Configuration]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalError' }
    put:
      summary: Replace the anomaly radar configuration
      tags: [Configuration]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        '200':
          description: Updated configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/metrics:
    get:
      summary: Retrieve historical metric snapshots
      tags: [Metrics]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: window
          description: Time window for metric aggregation (Go time.ParseDuration format)
          required: false
          schema:
            type: string
            example: 24h
        - in: query
          name: max_samples
          description: Maximum number of snapshots to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5000
      responses:
        '200':
          description: Historical metric snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/alerts:
    get:
      summary: List active alerts
      tags: [Alerts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/slo-budget:
    get:
      summary: Retrieve SLO budget status
      tags: [Anomaly Radar]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: SLO budget status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOBudgetResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/health:
    get:
      summary: Health check for anomaly radar service
      tags: [Operations]
      responses:
        '200':
          description: Healthy or warning state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '206':
          description: Partial data available (degraded mode)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/start:
    post:
      summary: Start anomaly radar monitoring
      tags: [Operations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Radar already running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopResponse'
        '202':
          description: Radar accepted for startup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/anomaly-radar/stop:
    post:
      summary: Stop anomaly radar monitoring
      tags: [Operations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Radar already stopped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopResponse'
        '202':
          description: Radar accepted for shutdown
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token with anomaly radar scopes (e.g., slo_admin)
  responses:
    BadRequest:
      description: Invalid request payload or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Lacking required permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimited:
      description: Too many requests
      headers:
        Retry-After:
          schema:
            type: integer
            format: int32
            description: Seconds until the next request may be attempted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnprocessableEntity:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    StatusResponse:
      type: object
      properties:
        anomaly_status:
          $ref: '#/components/schemas/AnomalyStatus'
        slo_budget:
          $ref: '#/components/schemas/SLOBudgetStatus'
        timestamp:
          type: string
          format: date-time
      required: [anomaly_status, slo_budget, timestamp]
    AnomalyStatus:
      type: object
      properties:
        backlog_status:
          type: string
          description: Overall backlog status (healthy, warning, critical)
        error_rate_status:
          type: string
        latency_status:
          type: string
        overall_status:
          type: string
        active_alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        last_updated:
          type: string
          format: date-time
      required: [overall_status, active_alerts, last_updated]
    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        severity:
          type: string
          enum: [info, warning, critical]
        message:
          type: string
        value:
          type: number
        threshold:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, type, severity, message, created_at, updated_at]
    SLOBudgetStatus:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/SLOConfig'
        total_budget:
          type: number
        consumed_budget:
          type: number
        remaining_budget:
          type: number
        budget_utilization:
          type: number
          description: Fraction [0,1]
        current_burn_rate:
          type: number
          description: Budget consumed per hour
        time_to_exhaustion:
          type: string
          description: Duration string (e.g., 89h30m)
        is_healthy:
          type: boolean
        alert_level:
          type: string
          enum: [healthy, warning, critical]
        last_calculated:
          type: string
          format: date-time
      required:
        - total_budget
        - consumed_budget
        - remaining_budget
        - budget_utilization
        - current_burn_rate
        - time_to_exhaustion
        - is_healthy
        - alert_level
    SLOConfig:
      type: object
      properties:
        availability_target:
          type: number
          minimum: 0
          maximum: 1
        latency_percentile:
          type: number
          minimum: 0
          maximum: 1
        latency_threshold_ms:
          type: integer
          minimum: 0
        window:
          type: string
          description: Go time.ParseDuration format (e.g., 720h)
        burn_rate_thresholds:
          $ref: '#/components/schemas/BurnRateThresholds'
      required: [availability_target, latency_threshold_ms]
    BurnRateThresholds:
      type: object
      properties:
        fast_burn_rate:
          type: number
        fast_burn_window:
          type: string
        slow_burn_rate:
          type: number
        slow_burn_window:
          type: string
      required: [fast_burn_rate, fast_burn_window, slow_burn_rate, slow_burn_window]
    MetricsResponse:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricSnapshot'
        window:
          type: string
        count:
          type: integer
        timestamp:
          type: string
          format: date-time
      required: [metrics, count, timestamp]
    MetricSnapshot:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        backlog_size:
          type: integer
        backlog_growth_rate:
          type: number
        request_count:
          type: integer
        error_count:
          type: integer
        error_rate:
          type: number
        p50_latency_ms:
          type: number
        p90_latency_ms:
          type: number
        p95_latency_ms:
          type: number
        p99_latency_ms:
          type: number
      required:
        - timestamp
        - backlog_size
    AlertsResponse:
      type: object
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        count:
          type: integer
        timestamp:
          type: string
          format: date-time
      required: [alerts, count, timestamp]
    SLOBudgetResponse:
      type: object
      properties:
        slo_budget:
          $ref: '#/components/schemas/SLOBudgetStatus'
        insights:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
      required: [slo_budget, timestamp]
    HealthResponse:
      type: object
      properties:
        is_running:
          type: boolean
        status:
          type: string
          enum: [healthy, warning, critical]
        alert_level:
          type: string
        active_alerts:
          type: integer
        last_updated:
          type: string
          format: date-time
        uptime:
          type: string
          description: Duration string
        timestamp:
          type: string
          format: date-time
      required: [is_running, status, timestamp]
    StartStopResponse:
      type: object
      properties:
        status:
          type: string
          description: "Values such as started, stopped, already_started, already_stopped"
        timestamp:
          type: string
          format: date-time
      required: [status, timestamp]
    GetConfigResponse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/SLOServiceConfig'
        timestamp:
          type: string
          format: date-time
      required: [config, timestamp]
    SLOServiceConfig:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/SLOConfig'
        thresholds:
          $ref: '#/components/schemas/AnomalyThresholds'
      required: [slo, thresholds]
    AnomalyThresholds:
      type: object
      properties:
        backlog_growth_warning:
          type: number
        backlog_growth_critical:
          type: number
        error_rate_warning:
          type: number
        error_rate_critical:
          type: number
        latency_p95_warning:
          type: number
        latency_p95_critical:
          type: number
      required:
        - backlog_growth_warning
        - backlog_growth_critical
        - error_rate_warning
        - error_rate_critical
        - latency_p95_warning
        - latency_p95_critical
    UpdateConfigRequest:
      type: object
      properties:
        slo:
          $ref: '#/components/schemas/SLOConfig'
        thresholds:
          $ref: '#/components/schemas/AnomalyThresholds'
      additionalProperties: false
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        code:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties:
            type: string
          nullable: true
        request_id:
          type: string
          nullable: true
      required: [error]
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            validation_errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                required: [field, message]
