openapi: 3.0.3
info:
  title: Worker Fleet Controls API
  description: |
    REST API for managing distributed worker fleets with comprehensive control operations.

    The Worker Fleet Controls API provides sophisticated management capabilities for distributed
    worker instances, enabling safe operations like pause, resume, drain, and rolling restarts.
    Built with operational safety as the primary concern, the API includes multiple confirmation
    layers, comprehensive audit trails, and robust safety checks.

    ## Key Features
    - **Fleet Visibility**: Real-time worker status and health monitoring
    - **Safe Operations**: Multi-layer safety checks prevent accidental outages
    - **Batch Controls**: Efficient management of multiple workers simultaneously
    - **Rolling Operations**: Zero-downtime deployment and restart capabilities
    - **Comprehensive Auditing**: Complete audit trail of all fleet operations
    - **Fine-Grained Authorization**: Role-based access control for sensitive operations

    ## Safety & Confirmation
    Critical operations require explicit confirmation and may require multi-factor authentication.
    The API implements circuit breakers and health checks to prevent fleet-wide outages.

    ## Real-Time Updates
    The API supports real-time updates through WebSocket connections for live fleet monitoring
    and operation progress tracking.
  version: "1.0.0"
  contact:
    name: Worker Fleet Controls Team
    email: platform-team@company.com
    url: https://docs.company.com/worker-fleet-controls
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.company.com/v1
    description: Production API Server
  - url: https://staging-api.company.com/v1
    description: Staging API Server
  - url: http://localhost:8080/v1
    description: Local Development Server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Workers
    description: Individual worker management and monitoring
  - name: Fleet
    description: Fleet-wide operations and health monitoring
  - name: Commands
    description: Fleet command execution and status tracking
  - name: Audit
    description: Audit logs and compliance reporting
  - name: Health
    description: Fleet health monitoring and diagnostics
  - name: Configuration
    description: Fleet configuration and safety settings

paths:
  /workers:
    get:
      tags: [Workers]
      summary: List all workers
      description: |
        Retrieve a paginated list of all workers in the fleet with their current status,
        health information, and metadata. Supports filtering and real-time updates.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of workers per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: state
          in: query
          description: Filter by worker state
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [starting, running, paused, draining, stopped, failed, unknown]
          style: form
          explode: false
        - name: healthy
          in: query
          description: Filter by health status
          required: false
          schema:
            type: boolean
        - name: tags
          in: query
          description: Filter by worker tags (comma-separated)
          required: false
          schema:
            type: string
            example: "production,us-east-1,high-memory"
        - name: host_id
          in: query
          description: Filter by host ID
          required: false
          schema:
            type: string
        - name: region
          in: query
          description: Filter by region
          required: false
          schema:
            type: string
        - name: include_metadata
          in: query
          description: Include detailed worker metadata
          required: false
          schema:
            type: boolean
            default: false
        - name: watch
          in: query
          description: Enable real-time updates via WebSocket
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successfully retrieved workers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Worker'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  fleet_summary:
                    $ref: '#/components/schemas/FleetSummary'
                  metadata:
                    type: object
                    properties:
                      last_updated:
                        type: string
                        format: date-time
                      update_frequency:
                        type: string
                        description: How often the data is refreshed
                        example: "5s"
            application/x-ndjson:
              schema:
                description: Newline-delimited JSON for streaming responses
                type: string
              example: |
                {"type":"worker","data":{"id":"worker-1","state":"running"}}
                {"type":"worker","data":{"id":"worker-2","state":"paused"}}
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}:
    get:
      tags: [Workers]
      summary: Get worker details
      description: Retrieve detailed information about a specific worker including metadata, health status, and current job
      parameters:
        - name: worker_id
          in: path
          required: true
          description: Unique identifier of the worker
          schema:
            type: string
        - name: include_history
          in: query
          description: Include recent state change history
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Worker details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Worker'
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/StateChangeEvent'
                  related_commands:
                    type: array
                    items:
                      $ref: '#/components/schemas/FleetCommand'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}/pause:
    post:
      tags: [Workers]
      summary: Pause worker
      description: |
        Pause a worker, causing it to stop accepting new jobs while allowing the current
        job (if any) to complete. The worker will remain in a paused state until resumed.
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for pausing the worker
                  example: "Maintenance required for host upgrades"
                timeout_seconds:
                  type: integer
                  minimum: 1
                  maximum: 3600
                  description: Maximum time to wait for current job completion
                  default: 300
                force:
                  type: boolean
                  default: false
                  description: Force pause even if worker has critical job (admin only)
            examples:
              maintenance_pause:
                summary: Maintenance Pause
                value:
                  reason: "Scheduled maintenance - OS updates"
                  timeout_seconds: 600
              debug_pause:
                summary: Debug Investigation
                value:
                  reason: "Investigation of memory leak"
                  timeout_seconds: 1800
      responses:
        '200':
          description: Worker pause command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                    description: Unique identifier for tracking this command
                  worker:
                    $ref: '#/components/schemas/Worker'
                  estimated_completion:
                    type: string
                    format: date-time
                    description: Estimated time when pause will complete
        '400':
          description: Invalid request or worker cannot be paused
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                already_paused:
                  summary: Worker Already Paused
                  value:
                    code: "WORKER_ALREADY_PAUSED"
                    message: "Worker is already in paused state"
                invalid_state:
                  summary: Invalid State for Pause
                  value:
                    code: "INVALID_STATE_TRANSITION"
                    message: "Cannot pause worker in draining state"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}/resume:
    post:
      tags: [Workers]
      summary: Resume paused worker
      description: Resume a paused worker, allowing it to start accepting new jobs again
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for resuming the worker
      responses:
        '200':
          description: Worker resume command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                  worker:
                    $ref: '#/components/schemas/Worker'
        '400':
          description: Worker cannot be resumed
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}/drain:
    post:
      tags: [Workers]
      summary: Drain worker
      description: |
        Drain a worker, causing it to stop accepting new jobs and exit after completing
        the current job. This is the safe way to remove a worker from the fleet.
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for draining the worker
                timeout_seconds:
                  type: integer
                  minimum: 1
                  maximum: 7200
                  description: Maximum time to wait for job completion before force stop
                  default: 600
                force_after_timeout:
                  type: boolean
                  default: true
                  description: Whether to force stop if timeout is reached
            examples:
              deployment_drain:
                summary: Deployment Drain
                value:
                  reason: "Application deployment - version 2.1.0"
                  timeout_seconds: 900
              scaling_down:
                summary: Scaling Down
                value:
                  reason: "Scaling down fleet due to reduced load"
                  timeout_seconds: 300
      responses:
        '200':
          description: Worker drain command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                  worker:
                    $ref: '#/components/schemas/Worker'
                  estimated_completion:
                    type: string
                    format: date-time
                  current_job_eta:
                    type: string
                    format: date-time
                    description: Estimated completion time of current job
        '400':
          description: Worker cannot be drained
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}/stop:
    post:
      tags: [Workers]
      summary: Force stop worker
      description: |
        Immediately stop a worker, potentially interrupting any current job processing.
        This is a destructive operation that should only be used in emergency situations.
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason, confirmation]
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for force stopping the worker
                confirmation:
                  type: string
                  description: Typed confirmation phrase to prevent accidents
                  example: "FORCE STOP CONFIRMED"
                emergency:
                  type: boolean
                  default: false
                  description: Mark as emergency stop (bypasses some safety checks)
            examples:
              emergency_stop:
                summary: Emergency Stop
                value:
                  reason: "Worker consuming excessive memory causing host issues"
                  confirmation: "FORCE STOP CONFIRMED"
                  emergency: true
      responses:
        '200':
          description: Worker stop command accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                  worker:
                    $ref: '#/components/schemas/Worker'
                  warning:
                    type: string
                    description: Warning about potential job interruption
        '400':
          description: Invalid confirmation or request
        '403':
          description: Insufficient permissions for force stop
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/{worker_id}/health:
    get:
      tags: [Workers]
      summary: Get worker health status
      description: Retrieve detailed health information for a specific worker
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Worker health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerHealth'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workers/batch:
    post:
      tags: [Workers]
      summary: Batch worker operations
      description: |
        Perform the same operation on multiple workers simultaneously. Includes safety
        checks to prevent accidentally affecting too many workers at once.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchWorkerRequest'
            examples:
              pause_maintenance_workers:
                summary: Pause Maintenance Workers
                description: Pause workers tagged for maintenance
                value:
                  operation: "pause"
                  worker_ids: ["worker-1", "worker-2", "worker-3"]
                  reason: "Scheduled maintenance window"
                  parameters:
                    timeout_seconds: 300
                  safety_checks:
                    max_workers: 10
                    require_confirmation: true
              drain_old_version:
                summary: Drain Old Version Workers
                description: Drain workers running older version
                value:
                  operation: "drain"
                  selector:
                    tags: ["version:1.0.0"]
                  reason: "Draining old version workers for upgrade"
                  parameters:
                    timeout_seconds: 600
                  safety_checks:
                    max_percentage: 50
                    require_confirmation: true
      responses:
        '200':
          description: Batch operation initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                  affected_workers:
                    type: array
                    items:
                      type: string
                  total_affected:
                    type: integer
                  estimated_completion:
                    type: string
                    format: date-time
                  progress_url:
                    type: string
                    format: uri
                    description: URL to track operation progress
        '400':
          description: Batch operation validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
                  safety_violations:
                    type: array
                    items:
                      type: object
                      properties:
                        check:
                          type: string
                        violation:
                          type: string
                        suggested_action:
                          type: string
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /fleet/status:
    get:
      tags: [Fleet]
      summary: Get fleet status
      description: Retrieve overall fleet health and status information
      responses:
        '200':
          description: Fleet status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetStatus'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /fleet/rolling-restart:
    post:
      tags: [Fleet]
      summary: Perform rolling restart
      description: |
        Perform a rolling restart of workers with configurable concurrency and safety checks.
        This enables zero-downtime deployments and fleet-wide updates.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollingRestartRequest'
            examples:
              deployment_restart:
                summary: Deployment Rolling Restart
                description: Rolling restart for application deployment
                value:
                  selector:
                    tags: ["environment:production"]
                  config:
                    max_unavailable: 5
                    batch_size: 2
                    drain_timeout_seconds: 600
                    restart_delay_seconds: 30
                    health_check:
                      enabled: true
                      timeout_seconds: 120
                      retries: 3
                  reason: "Rolling restart for application version 2.1.0 deployment"
                  confirmation: "ROLLING RESTART CONFIRMED"
              emergency_restart:
                summary: Emergency Fleet Restart
                description: Emergency restart due to memory leaks
                value:
                  selector:
                    all: true
                  config:
                    max_unavailable: 10
                    batch_size: 5
                    drain_timeout_seconds: 300
                    restart_delay_seconds: 10
                  reason: "Emergency restart due to memory leak in worker processes"
                  confirmation: "EMERGENCY RESTART CONFIRMED"
                  emergency: true
      responses:
        '200':
          description: Rolling restart initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  command_id:
                    type: string
                    format: uuid
                  total_workers:
                    type: integer
                  batches:
                    type: integer
                  estimated_duration:
                    type: string
                    description: Estimated total duration (e.g., "45m")
                  progress_url:
                    type: string
                    format: uri
        '400':
          description: Rolling restart validation failed
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /fleet/metrics:
    get:
      tags: [Fleet]
      summary: Get fleet metrics
      description: Retrieve comprehensive fleet performance and health metrics
      parameters:
        - name: time_range
          in: query
          description: Time range for metrics
          required: false
          schema:
            type: string
            enum: [5m, 15m, 1h, 6h, 24h, 7d]
            default: "1h"
        - name: granularity
          in: query
          description: Metrics granularity
          required: false
          schema:
            type: string
            enum: [10s, 1m, 5m, 15m, 1h]
            default: "1m"
        - name: metrics
          in: query
          description: Specific metrics to retrieve
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [worker_count, health_ratio, command_rate, heartbeat_latency]
          style: form
          explode: false
      responses:
        '200':
          description: Fleet metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /commands:
    get:
      tags: [Commands]
      summary: List fleet commands
      description: Retrieve a list of fleet commands with their status and progress
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter by command status
          schema:
            type: array
            items:
              type: string
              enum: [pending, running, completed, failed, cancelled]
          style: form
          explode: false
        - name: type
          in: query
          description: Filter by command type
          schema:
            type: array
            items:
              type: string
              enum: [pause, resume, drain, stop, rolling_restart, batch]
          style: form
          explode: false
        - name: created_by
          in: query
          description: Filter by user who created the command
          schema:
            type: string
      responses:
        '200':
          description: Commands retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FleetCommand'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /commands/{command_id}:
    get:
      tags: [Commands]
      summary: Get command status
      description: Retrieve detailed status and progress information for a specific command
      parameters:
        - name: command_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Command status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetCommand'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Commands]
      summary: Cancel command
      description: |
        Cancel a pending or running command. Note that some commands may not be
        immediately cancellable depending on their current state.
      parameters:
        - name: command_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for cancelling the command
                force:
                  type: boolean
                  default: false
                  description: Force cancellation even if not safely cancellable
      responses:
        '200':
          description: Command cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetCommand'
        '400':
          description: Command cannot be cancelled
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /audit:
    get:
      tags: [Audit]
      summary: Get audit log
      description: |
        Retrieve audit log entries for fleet control operations with comprehensive
        filtering capabilities for compliance and debugging purposes.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: start_time
          in: query
          description: Start time filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: End time filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: worker_id
          in: query
          description: Filter by worker ID
          schema:
            type: string
        - name: command_id
          in: query
          description: Filter by command ID
          schema:
            type: string
            format: uuid
        - name: action_type
          in: query
          description: Filter by action type
          schema:
            type: array
            items:
              type: string
              enum: [pause, resume, drain, stop, restart, heartbeat, status_change]
          style: form
          explode: false
        - name: performed_by
          in: query
          description: Filter by user who performed the action
          schema:
            type: string
        - name: success
          in: query
          description: Filter by success status
          schema:
            type: boolean
      responses:
        '200':
          description: Audit log retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLogEntry'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  summary:
                    type: object
                    properties:
                      total_actions:
                        type: integer
                      success_rate:
                        type: number
                      most_active_users:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              type: string
                            action_count:
                              type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags: [Health]
      summary: Get fleet health
      description: Retrieve comprehensive fleet health information and diagnostics
      responses:
        '200':
          description: Fleet health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetHealth'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/safety:
    get:
      tags: [Configuration]
      summary: Get safety configuration
      description: Retrieve current safety configuration and limits
      responses:
        '200':
          description: Safety configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafetyConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Configuration]
      summary: Update safety configuration
      description: |
        Update safety configuration. This is a sensitive operation that requires
        elevated permissions and generates audit entries.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafetyConfiguration'
      responses:
        '200':
          description: Safety configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafetyConfiguration'
        '400':
          description: Invalid safety configuration
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include the token in the Authorization header:
        `Authorization: Bearer <token>`
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key for service-to-service authentication. Include in X-API-Key header:
        `X-API-Key: <api-key>`

  schemas:
    Worker:
      type: object
      required:
        - id
        - host_id
        - state
        - last_heartbeat
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Unique identifier for the worker
          example: "worker-prod-01-abc123"
        host_id:
          type: string
          description: Identifier of the host machine
          example: "i-0abcd1234efgh5678"
        process_id:
          type: integer
          description: Process ID of the worker
          example: 12345
        state:
          $ref: '#/components/schemas/WorkerState'
        last_heartbeat:
          type: string
          format: date-time
          description: Timestamp of the last heartbeat
          example: "2025-09-14T15:30:45Z"
        current_job:
          $ref: '#/components/schemas/JobReference'
        metadata:
          $ref: '#/components/schemas/WorkerMetadata'
        configuration:
          $ref: '#/components/schemas/WorkerConfiguration'
        created_at:
          type: string
          format: date-time
          description: When the worker was first registered
        updated_at:
          type: string
          format: date-time
          description: When the worker was last updated
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing workers
          example: ["production", "us-east-1", "high-memory"]
        version:
          type: string
          description: Worker software version
          example: "2.1.0"

    WorkerState:
      type: string
      enum: [starting, running, paused, draining, stopped, failed, unknown]
      description: Current state of the worker
      example: "running"

    JobReference:
      type: object
      description: Reference to a currently executing job
      properties:
        id:
          type: string
          description: Job identifier
        queue:
          type: string
          description: Source queue name
        started_at:
          type: string
          format: date-time
          description: When job execution started
        estimated_completion:
          type: string
          format: date-time
          description: Estimated completion time
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: Job progress (0.0 to 1.0)
        job_type:
          type: string
          description: Type of job being processed

    WorkerMetadata:
      type: object
      description: Metadata about the worker instance
      properties:
        hostname:
          type: string
          description: Hostname of the worker machine
          example: "worker-01.us-east-1.compute.internal"
        ip_address:
          type: string
          format: ipv4
          description: IP address of the worker
          example: "10.0.1.100"
        region:
          type: string
          description: Geographic region
          example: "us-east-1"
        availability_zone:
          type: string
          description: Availability zone
          example: "us-east-1a"
        instance_type:
          type: string
          description: Instance type or size
          example: "m5.large"
        cpu_cores:
          type: integer
          minimum: 1
          description: Number of CPU cores
          example: 2
        memory_mb:
          type: integer
          minimum: 1
          description: Memory in megabytes
          example: 8192
        queue_types:
          type: array
          items:
            type: string
          description: Types of queues this worker can process
          example: ["user-actions", "email-delivery", "data-processing"]
        capabilities:
          type: array
          items:
            type: string
          description: Worker capabilities and features
          example: ["gpu-acceleration", "large-memory", "file-processing"]
        environment:
          type: object
          additionalProperties:
            type: string
          description: Environment variables and configuration
        resource_limits:
          $ref: '#/components/schemas/ResourceLimits'
        health_status:
          $ref: '#/components/schemas/WorkerHealthStatus'

    ResourceLimits:
      type: object
      description: Resource limits for the worker
      properties:
        max_memory_mb:
          type: integer
          description: Maximum memory usage in MB
        max_cpu_percent:
          type: number
          description: Maximum CPU usage percentage
        max_concurrent_jobs:
          type: integer
          description: Maximum number of concurrent jobs
        max_job_duration_seconds:
          type: integer
          description: Maximum job duration in seconds

    WorkerHealthStatus:
      type: object
      description: Current health status of the worker
      properties:
        healthy:
          type: boolean
          description: Overall health status
        last_health_check:
          type: string
          format: date-time
          description: When health was last checked
        cpu_usage:
          type: number
          minimum: 0
          maximum: 1
          description: Current CPU usage (0.0 to 1.0)
        memory_usage:
          type: number
          minimum: 0
          maximum: 1
          description: Current memory usage (0.0 to 1.0)
        active_jobs:
          type: integer
          minimum: 0
          description: Number of currently active jobs
        jobs_processed:
          type: integer
          minimum: 0
          description: Total number of jobs processed
        error_rate:
          type: number
          minimum: 0
          maximum: 1
          description: Recent error rate (0.0 to 1.0)
        uptime_seconds:
          type: integer
          minimum: 0
          description: Worker uptime in seconds

    WorkerConfiguration:
      type: object
      description: Worker configuration settings
      properties:
        max_concurrent_jobs:
          type: integer
          minimum: 1
          default: 1
        poll_interval_seconds:
          type: integer
          minimum: 1
          default: 5
        heartbeat_interval_seconds:
          type: integer
          minimum: 1
          default: 30
        job_timeout_seconds:
          type: integer
          minimum: 1
          default: 3600
        retry_policy:
          type: object
          properties:
            max_retries:
              type: integer
              minimum: 0
            backoff_multiplier:
              type: number
              minimum: 1
            initial_delay_seconds:
              type: integer
              minimum: 1

    BatchWorkerRequest:
      type: object
      required: [operation]
      description: Request for batch worker operations
      properties:
        operation:
          type: string
          enum: [pause, resume, drain, stop]
          description: Operation to perform on selected workers
        worker_ids:
          type: array
          items:
            type: string
          description: Specific worker IDs to operate on
        selector:
          $ref: '#/components/schemas/WorkerSelector'
        reason:
          type: string
          maxLength: 500
          description: Reason for the batch operation
        parameters:
          type: object
          description: Operation-specific parameters
          additionalProperties: true
        safety_checks:
          $ref: '#/components/schemas/BatchSafetyChecks'
        confirmation:
          type: string
          description: Confirmation phrase for destructive operations

    WorkerSelector:
      type: object
      description: Selector for choosing workers based on criteria
      properties:
        all:
          type: boolean
          description: Select all workers (use with extreme caution)
        tags:
          type: array
          items:
            type: string
          description: Select workers with specific tags
        state:
          type: array
          items:
            $ref: '#/components/schemas/WorkerState'
          description: Select workers in specific states
        healthy:
          type: boolean
          description: Filter by health status
        region:
          type: string
          description: Select workers in specific region
        host_pattern:
          type: string
          description: Regex pattern for host IDs
        version:
          type: string
          description: Select workers with specific version

    BatchSafetyChecks:
      type: object
      description: Safety checks for batch operations
      properties:
        max_workers:
          type: integer
          minimum: 1
          description: Maximum number of workers to affect
        max_percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Maximum percentage of fleet to affect
        require_confirmation:
          type: boolean
          default: true
          description: Whether to require explicit confirmation
        min_healthy_after:
          type: integer
          minimum: 1
          description: Minimum healthy workers to maintain after operation
        dry_run:
          type: boolean
          default: false
          description: Only simulate the operation

    RollingRestartRequest:
      type: object
      required: [selector, config, reason, confirmation]
      description: Request for rolling restart operation
      properties:
        selector:
          $ref: '#/components/schemas/WorkerSelector'
        config:
          $ref: '#/components/schemas/RollingRestartConfig'
        reason:
          type: string
          maxLength: 500
          description: Reason for the rolling restart
        confirmation:
          type: string
          description: Confirmation phrase
        emergency:
          type: boolean
          default: false
          description: Mark as emergency restart (relaxed safety checks)

    RollingRestartConfig:
      type: object
      required: [max_unavailable, batch_size, drain_timeout_seconds]
      description: Configuration for rolling restart operation
      properties:
        max_unavailable:
          type: integer
          minimum: 1
          description: Maximum workers that can be unavailable simultaneously
        batch_size:
          type: integer
          minimum: 1
          description: Number of workers to restart in each batch
        drain_timeout_seconds:
          type: integer
          minimum: 1
          maximum: 7200
          description: Timeout for draining each worker
        restart_delay_seconds:
          type: integer
          minimum: 0
          maximum: 300
          description: Delay between batches
          default: 30
        health_check:
          $ref: '#/components/schemas/HealthCheckConfig'
        strategy:
          type: string
          enum: [recreate, rolling_update, blue_green]
          default: "rolling_update"
          description: Restart strategy to use
        rollback:
          $ref: '#/components/schemas/RollbackConfig'

    HealthCheckConfig:
      type: object
      description: Health check configuration for operations
      properties:
        enabled:
          type: boolean
          default: true
          description: Whether health checks are enabled
        timeout_seconds:
          type: integer
          minimum: 1
          maximum: 300
          default: 60
          description: Timeout for health checks
        retries:
          type: integer
          minimum: 0
          maximum: 10
          default: 3
          description: Number of health check retries
        interval_seconds:
          type: integer
          minimum: 1
          maximum: 60
          default: 10
          description: Interval between health checks

    RollbackConfig:
      type: object
      description: Rollback configuration for failed operations
      properties:
        enabled:
          type: boolean
          default: true
          description: Whether automatic rollback is enabled
        trigger_conditions:
          type: array
          items:
            type: string
            enum: [health_check_failed, timeout_exceeded, error_threshold_reached]
          description: Conditions that trigger rollback
        max_rollback_time_seconds:
          type: integer
          minimum: 1
          description: Maximum time to spend on rollback

    FleetCommand:
      type: object
      required: [id, type, status, created_by, created_at]
      description: A fleet management command
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the command
        type:
          type: string
          enum: [pause, resume, drain, stop, rolling_restart, batch]
          description: Type of command
        target_ids:
          type: array
          items:
            type: string
          description: Worker IDs targeted by this command
        parameters:
          type: object
          description: Command-specific parameters
          additionalProperties: true
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          description: Current status of the command
        progress:
          $ref: '#/components/schemas/CommandProgress'
        created_by:
          type: string
          description: User who created the command
        created_at:
          type: string
          format: date-time
          description: When the command was created
        started_at:
          type: string
          format: date-time
          description: When the command started executing
        completed_at:
          type: string
          format: date-time
          description: When the command completed
        error_message:
          type: string
          description: Error message if command failed
        audit_trail:
          type: array
          items:
            $ref: '#/components/schemas/AuditEntry'
          description: Audit trail for this command

    CommandProgress:
      type: object
      description: Progress information for a command
      properties:
        total_workers:
          type: integer
          description: Total number of workers affected
        completed_workers:
          type: integer
          description: Number of workers completed
        failed_workers:
          type: integer
          description: Number of workers that failed
        in_progress_workers:
          type: integer
          description: Number of workers currently being processed
        percentage_complete:
          type: number
          minimum: 0
          maximum: 100
          description: Percentage completion
        estimated_time_remaining:
          type: string
          description: Estimated time remaining (e.g., "5m30s")
        current_batch:
          type: integer
          description: Current batch number (for rolling operations)
        total_batches:
          type: integer
          description: Total number of batches

    FleetStatus:
      type: object
      description: Overall fleet status and health
      properties:
        total_workers:
          type: integer
          description: Total number of workers in the fleet
        healthy_workers:
          type: integer
          description: Number of healthy workers
        worker_states:
          type: object
          description: Count of workers by state
          properties:
            starting:
              type: integer
            running:
              type: integer
            paused:
              type: integer
            draining:
              type: integer
            stopped:
              type: integer
            failed:
              type: integer
            unknown:
              type: integer
        fleet_health_ratio:
          type: number
          minimum: 0
          maximum: 1
          description: Ratio of healthy to total workers
        active_commands:
          type: integer
          description: Number of currently executing commands
        regions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              worker_count:
                type: integer
              healthy_count:
                type: integer
        capacity:
          type: object
          description: Fleet capacity information
          properties:
            total_cpu_cores:
              type: integer
            total_memory_mb:
              type: integer
            available_cpu_cores:
              type: integer
            available_memory_mb:
              type: integer
            utilization_percentage:
              type: number
        last_updated:
          type: string
          format: date-time
          description: When this status was last updated

    FleetSummary:
      type: object
      description: Summary of fleet statistics
      properties:
        total_count:
          type: integer
          description: Total number of workers
        healthy_count:
          type: integer
          description: Number of healthy workers
        by_state:
          type: object
          additionalProperties:
            type: integer
          description: Worker count by state
        by_region:
          type: object
          additionalProperties:
            type: integer
          description: Worker count by region
        health_ratio:
          type: number
          minimum: 0
          maximum: 1
          description: Overall health ratio

    FleetMetrics:
      type: object
      description: Fleet performance metrics
      properties:
        timestamp:
          type: string
          format: date-time
          description: When these metrics were collected
        time_range:
          type: string
          description: Time range covered by metrics
        worker_count:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
          description: Worker count over time
        health_ratio:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
          description: Fleet health ratio over time
        command_rate:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
          description: Command execution rate
        heartbeat_latency:
          type: array
          items:
            $ref: '#/components/schemas/LatencyPoint'
          description: Heartbeat latency percentiles
        resource_usage:
          $ref: '#/components/schemas/ResourceUsageMetrics'

    TimeSeriesPoint:
      type: object
      required: [timestamp, value]
      description: A single point in a time series
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number

    LatencyPoint:
      type: object
      required: [timestamp, p50, p95, p99]
      description: Latency percentiles at a point in time
      properties:
        timestamp:
          type: string
          format: date-time
        p50:
          type: number
          description: 50th percentile latency in milliseconds
        p95:
          type: number
          description: 95th percentile latency in milliseconds
        p99:
          type: number
          description: 99th percentile latency in milliseconds

    ResourceUsageMetrics:
      type: object
      description: Resource usage metrics
      properties:
        cpu_usage:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
        memory_usage:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
        disk_usage:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
        network_io:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'

    AuditLogEntry:
      type: object
      required: [id, action_type, success, performed_by, performed_at]
      description: Single entry in the audit log
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for this audit entry
        worker_id:
          type: string
          description: ID of the worker affected
        command_id:
          type: string
          format: uuid
          description: ID of the command that triggered this action
        action_type:
          type: string
          enum: [pause, resume, drain, stop, restart, heartbeat, status_change]
          description: Type of action performed
        old_state:
          $ref: '#/components/schemas/WorkerState'
        new_state:
          $ref: '#/components/schemas/WorkerState'
        success:
          type: boolean
          description: Whether the action was successful
        error_message:
          type: string
          description: Error message if action failed
        performed_by:
          type: string
          description: User who performed the action
        performed_at:
          type: string
          format: date-time
          description: When the action was performed
        metadata:
          type: object
          description: Additional context and metadata
          additionalProperties: true
        ip_address:
          type: string
          format: ipv4
          description: IP address of the request origin
        user_agent:
          type: string
          description: User agent string

    AuditEntry:
      type: object
      description: Single audit entry within a command
      properties:
        timestamp:
          type: string
          format: date-time
        action:
          type: string
        details:
          type: object
          additionalProperties: true
        user:
          type: string
        success:
          type: boolean

    StateChangeEvent:
      type: object
      description: Worker state change event
      properties:
        timestamp:
          type: string
          format: date-time
        old_state:
          $ref: '#/components/schemas/WorkerState'
        new_state:
          $ref: '#/components/schemas/WorkerState'
        reason:
          type: string
        triggered_by:
          type: string
        command_id:
          type: string
          format: uuid

    WorkerHealth:
      type: object
      description: Detailed health information for a worker
      properties:
        worker_id:
          type: string
        overall_health:
          type: string
          enum: [healthy, unhealthy, unknown]
        health_score:
          type: number
          minimum: 0
          maximum: 1
          description: Health score from 0.0 to 1.0
        checks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
                enum: [pass, fail, warn]
              message:
                type: string
              last_checked:
                type: string
                format: date-time
        metrics:
          $ref: '#/components/schemas/WorkerHealthStatus'
        recommendations:
          type: array
          items:
            type: string
          description: Health improvement recommendations

    FleetHealth:
      type: object
      description: Comprehensive fleet health information
      properties:
        overall_status:
          type: string
          enum: [healthy, degraded, critical, unknown]
        health_score:
          type: number
          minimum: 0
          maximum: 1
        total_workers:
          type: integer
        healthy_workers:
          type: integer
        unhealthy_workers:
          type: integer
        unknown_workers:
          type: integer
        critical_issues:
          type: array
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [low, medium, high, critical]
              category:
                type: string
              description:
                type: string
              affected_workers:
                type: integer
              recommended_action:
                type: string
        regional_health:
          type: array
          items:
            type: object
            properties:
              region:
                type: string
              health_score:
                type: number
              worker_count:
                type: integer
              issues:
                type: array
                items:
                  type: string
        trends:
          type: object
          properties:
            health_trend:
              type: string
              enum: [improving, stable, degrading]
            worker_count_trend:
              type: string
              enum: [increasing, stable, decreasing]

    SafetyConfiguration:
      type: object
      description: Safety configuration and limits
      properties:
        global_limits:
          type: object
          properties:
            max_simultaneous_drains:
              type: integer
              minimum: 1
              description: Maximum workers that can be draining simultaneously
            min_healthy_workers:
              type: integer
              minimum: 1
              description: Minimum number of healthy workers to maintain
            min_healthy_percentage:
              type: number
              minimum: 0
              maximum: 100
              description: Minimum percentage of workers that must remain healthy
        confirmation_requirements:
          type: object
          properties:
            destructive_operations:
              type: boolean
              description: Require confirmation for destructive operations
            batch_operations:
              type: boolean
              description: Require confirmation for batch operations
            emergency_override:
              type: boolean
              description: Allow emergency override of safety checks
        rate_limits:
          type: object
          properties:
            commands_per_minute:
              type: integer
              description: Maximum commands per minute
            commands_per_hour:
              type: integer
              description: Maximum commands per hour
        circuit_breakers:
          type: object
          properties:
            enabled:
              type: boolean
            failure_threshold:
              type: integer
            recovery_timeout_seconds:
              type: integer
        emergency_procedures:
          type: object
          properties:
            enabled:
              type: boolean
            contacts:
              type: array
              items:
                type: string
            escalation_timeout_minutes:
              type: integer

    PaginationInfo:
      type: object
      required: [page, size, total_items, total_pages]
      description: Pagination information
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        size:
          type: integer
          minimum: 1
          description: Items per page
        total_items:
          type: integer
          minimum: 0
          description: Total number of items
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages
        has_next:
          type: boolean
          description: Whether there is a next page
        has_previous:
          type: boolean
          description: Whether there is a previous page

    Error:
      type: object
      required: [code, message]
      description: Standard error response
      properties:
        code:
          type: string
          description: Machine-readable error code
          examples: ["WORKER_NOT_FOUND", "INVALID_STATE_TRANSITION", "SAFETY_CHECK_FAILED"]
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error context
          additionalProperties: true
        trace_id:
          type: string
          description: Request trace ID for debugging
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_worker_id:
              summary: Invalid Worker ID
              value:
                code: "INVALID_WORKER_ID"
                message: "The worker ID must be a non-empty string"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_token:
              summary: Missing Authentication Token
              value:
                code: "MISSING_AUTH_TOKEN"
                message: "Authentication token is required for fleet operations"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            insufficient_permissions:
              summary: Insufficient Permissions
              value:
                code: "INSUFFICIENT_PERMISSIONS"
                message: "You do not have permission to perform fleet control operations"
                details:
                  required_permission: "fleet:drain"
                  user_permissions: ["fleet:view", "fleet:pause"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            worker_not_found:
              summary: Worker Not Found
              value:
                code: "WORKER_NOT_FOUND"
                message: "The specified worker was not found"
                details:
                  worker_id: "worker-not-exist-123"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            database_error:
              summary: Database Connection Error
              value:
                code: "DATABASE_ERROR"
                message: "Unable to connect to the worker registry"
                details:
                  retry_after_seconds: 30