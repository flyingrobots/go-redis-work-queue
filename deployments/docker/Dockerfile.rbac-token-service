# Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the RBAC token service binary
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o rbac-token-service ./cmd/rbac-token-service

# Runtime stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata wget

# Create non-root user
RUN addgroup -g 1000 -S tokenuser && \
    adduser -u 1000 -S tokenuser -G tokenuser

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/rbac-token-service /app/rbac-token-service

# Copy default configs if they exist
COPY --from=builder /app/configs/rbac* /app/configs/ 2>/dev/null || true
COPY --from=builder /app/deployments/docker/rbac-configs/ /app/configs/ 2>/dev/null || true

# Create directories for keys, logs and audit
RUN mkdir -p /app/keys /app/logs /app/audit /app/configs && \
    chown -R tokenuser:tokenuser /app

# Switch to non-root user
USER tokenuser

# Expose port
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8081/health || exit 1

# Run the binary
ENTRYPOINT ["/app/rbac-token-service"]
CMD ["--config", "/app/configs/token-service.yaml"]