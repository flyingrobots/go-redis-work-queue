apiVersion: v1
kind: Namespace
metadata:
  name: work-queue
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-api-config
  namespace: work-queue
data:
  admin-api.yaml: |
    server:
      listen_addr: ":8080"
      read_timeout: 30s
      write_timeout: 30s

    auth:
      require_auth: true
      token_header: "X-API-Token"
      tokens:
        - token: "${API_TOKEN_1}"
          name: "service-account-1"
          permissions:
            - "read:*"
            - "write:*"
        - token: "${API_TOKEN_2}"
          name: "readonly-account"
          permissions:
            - "read:*"

    rate_limit:
      enabled: true
      requests_per_minute: 100
      burst: 20

    audit:
      enabled: true
      log_path: "/app/audit/audit.log"
      rotate_size_mb: 100
      max_backups: 10

    cors:
      enabled: true
      allowed_origins:
        - "http://localhost:3000"
        - "https://admin.example.com"
      allowed_methods:
        - "GET"
        - "POST"
        - "PUT"
        - "DELETE"
      allowed_headers:
        - "Content-Type"
        - "X-API-Token"
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-api-secrets
  namespace: work-queue
type: Opaque
stringData:
  api-token-1: "changeme-service-token"
  api-token-2: "changeme-readonly-token"
  redis-password: "changeme-redis-password"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-api
  namespace: work-queue
  labels:
    app: admin-api
    component: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admin-api
  template:
    metadata:
      labels:
        app: admin-api
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: admin-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: admin-api
        image: redis-work-queue/admin-api:v0.4.0-alpha
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: REDIS_HOST
          value: "redis-master.work-queue.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: admin-api-secrets
              key: redis-password
        - name: API_TOKEN_1
          valueFrom:
            secretKeyRef:
              name: admin-api-secrets
              key: api-token-1
        - name: API_TOKEN_2
          valueFrom:
            secretKeyRef:
              name: admin-api-secrets
              key: api-token-2
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/configs
          readOnly: true
        - name: audit-logs
          mountPath: /app/audit
      volumes:
      - name: config
        configMap:
          name: admin-api-config
      - name: audit-logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: admin-api
  namespace: work-queue
  labels:
    app: admin-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: admin-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-api
  namespace: work-queue
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: admin-api
  namespace: work-queue
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["admin-api-config"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["admin-api-secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: admin-api
  namespace: work-queue
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: admin-api
subjects:
- kind: ServiceAccount
  name: admin-api
  namespace: work-queue
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-api
  namespace: work-queue
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - admin-api.staging.example.com
    secretName: admin-api-tls
  rules:
  - host: admin-api.staging.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-api
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: admin-api
  namespace: work-queue
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: admin-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: admin-api
  namespace: work-queue
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: admin-api
